================================================================================
项目目录结构
================================================================================

扫盘大王/
    ├── public/
    └── index.html
├── README.md
├── package-lock.json
├── package.json
├── project_combined.txt
└── server.js

================================================================================
代码文件内容
================================================================================

################################################################################
# 文件 1/6: package-lock.json
################################################################################

{
  "name": "hard-disk-scanner",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "hard-disk-scanner",
      "version": "1.0.0",
      "license": "MIT",
      "dependencies": {
        "express": "^4.18.2",
        "ws": "^8.14.2"
      },
      "devDependencies": {
        "nodemon": "^3.0.1"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/nodemon": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.10.tgz",
      "integrity": "sha512-WDjw3pJ0/0jMFmyNDp3gvY2YizjLmmOUQo6DEBY+JgdvW/yQ9mEeSw6H5ythl5Ny2ytb7f9C2nIbjSxMNzbJXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^4",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^7.5.3",
        "simple-update-notifier": "^2.0.0",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "4.4.3",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
      "integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/simple-update-notifier": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/ws": {
      "version": "8.18.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  }
}


################################################################################
# 文件 2/6: package.json
################################################################################

{
  "name": "hard-disk-scanner",
  "version": "1.0.0",
  "description": "硬盘空间扫描和可视化工具",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "ws": "^8.14.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  },
  "author": "",
  "license": "MIT"
}

################################################################################
# 文件 3/6: project_combined.txt
################################################################################

================================================================================
项目目录结构
================================================================================

扫盘大王/
    ├── public/
    └── index.html
├── README.md
├── package.json
└── server.js

================================================================================
代码文件内容
================================================================================

################################################################################
# 文件 1/4: package.json
################################################################################

{
  "name": "hard-disk-scanner",
  "version": "1.0.0",
  "description": "硬盘空间扫描和可视化工具",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "ws": "^8.14.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  },
  "author": "",
  "license": "MIT"
}

################################################################################
# 文件 2/4: README.md
################################################################################

# 扫盘大王 - 硬盘空间分析工具

一个基于 Node.js 和 WebSocket 的硬盘空间分析工具，能够实时扫描硬盘并可视化展示文件类型、文件夹和应用程序的空间占用情况。

## 功能特点

- **实时扫描**：使用 Node.js 递归扫描硬盘，通过 WebSocket 推送扫描进度
- **数据可视化**：使用 Chart.js 生成三种环形饼图展示不同维度的数据分布
- **文件类型分析**：自动识别并统计不同文件类型的空间占用
- **文件夹占用统计**：分析各个文件夹的空间使用情况
- **应用程序识别**：自动识别并统计应用程序占用空间
- **响应式设计**：适配不同屏幕尺寸的设备
- **交互界面**：支持搜索、排序、分页等交互操作
- **权限处理**：对无访问权限的文件进行容错处理

## 技术栈

- **后端**：Node.js, Express, WebSocket (ws)
- **前端**：HTML5, JavaScript, Tailwind CSS, Chart.js
- **通信**：WebSocket 实时数据传输

## 安装指南

### 1. 安装 Node.js

在运行本应用之前，需要先安装 Node.js。请按照以下步骤操作：

1. 访问 [Node.js 官方网站](https://nodejs.org/zh-cn/)
2. 下载并安装适合您操作系统的 LTS 版本
3. 安装完成后，打开命令提示符或终端，验证安装是否成功：

```bash
node -v
npm -v
```

### 2. 安装项目依赖

进入项目目录，运行以下命令安装所需依赖：

```bash
npm install
```

### 3. 运行应用

安装完成后，使用以下命令启动应用：

```bash
npm start
```

### 4. 访问应用

启动成功后，打开浏览器并访问：

```
http://localhost:3000
```

## 使用说明

1. **选择驱动器**：从下拉菜单中选择要扫描的硬盘驱动器
2. **设置扫描深度**：
   - 浅度扫描：快速扫描顶层目录
   - 中度扫描：扫描到第二层或第三层目录
   - 深度扫描：完整扫描整个驱动器
3. **开始扫描**：点击"开始扫描"按钮启动扫描过程
4. **查看进度**：扫描过程中会实时显示进度条和统计信息
5. **分析结果**：扫描完成后，可以通过以下方式查看结果：
   - 环形饼图：直观展示文件类型、文件夹和应用程序的空间占用
   - 详细数据表：提供搜索、排序和分页功能，方便查看详细信息

## 注意事项

- **扫描权限**：某些系统文件或受保护目录可能无法访问，应用会自动跳过这些文件
- **扫描时间**：完整扫描大型硬盘可能需要较长时间，请耐心等待
- **资源占用**：深度扫描可能会占用较多系统资源

## 开发命令

- **启动开发服务器**：
  ```bash
  npm run dev
  ```
  (使用 nodemon 自动重启服务器)

- **启动生产服务器**：
  ```bash
  npm start
  ```

## 目录结构

```
├── public/             # 静态资源目录
│   └── index.html      # 前端页面
├── server.js           # 后端服务器代码
├── package.json        # 项目配置和依赖
└── README.md           # 项目说明文档
```

## License

MIT

################################################################################
# 文件 3/4: server.js
################################################################################

const express = require('express');
const fs = require('fs');
const path = require('path');
const { WebSocketServer } = require('ws');
const os = require('os');

const app = express();
const PORT = 3000;

// 静态文件服务
app.use(express.static(path.join(__dirname, 'public')));

// API接口：获取系统驱动器列表
app.get('/api/drives', (req, res) => {
    try {
        let drives = [];
        
        if (os.platform() === 'win32') {
            // Windows系统获取驱动器
            const child_process = require('child_process');
            const result = child_process.execSync('wmic logicaldisk get caption').toString();
            const driveList = result.match(/[A-Z]:/g) || [];
            drives = driveList.map(drive => ({ name: drive, type: 'local' }));
        } else {
            // Unix/Linux系统获取挂载点
            const result = child_process.execSync('df -h').toString();
            const lines = result.split('\n').slice(1);
            drives = lines
                .filter(line => line.trim())
                .map(line => {
                    const parts = line.split(/\s+/);
                    return { name: parts[5], type: 'local' };
                });
        }
        
        res.json(drives);
    } catch (error) {
        console.error('获取驱动器列表失败:', error);
        res.status(500).json({ error: '获取驱动器列表失败', message: error.message });
    }
});

// 启动HTTP服务器
const server = app.listen(PORT, () => {
    console.log(`服务器运行在 http://localhost:${PORT}`);
});

// 创建WebSocket服务器
const wss = new WebSocketServer({ server });

// 存储活跃的扫描任务
const scanTasks = new Map();

// WebSocket连接处理
wss.on('connection', (ws) => {
    console.log('客户端已连接');
    
    // 客户端消息处理
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            
            switch (data.type) {
                case 'start_scan':
                    startScan(ws, data.payload);
                    break;
                case 'stop_scan':
                    stopScan(data.payload.taskId);
                    break;
                default:
                    console.log('未知消息类型:', data.type);
            }
        } catch (error) {
            console.error('处理消息时出错:', error);
        }
    });
    
    // 连接关闭处理
    ws.on('close', () => {
        console.log('客户端已断开连接');
        // 清理该客户端的所有扫描任务
        for (const [taskId, task] of scanTasks.entries()) {
            if (task.ws === ws) {
                task.abort = true;
                scanTasks.delete(taskId);
            }
        }
    });
});

// 开始扫描任务
function startScan(ws, payload) {
    const { drivePath, scanDepth = 3 } = payload;
    const taskId = Date.now().toString();
    
    // 初始化扫描统计数据
    const scanStats = {
        totalFiles: 0,
        totalSize: 0,
        fileTypes: {},
        folders: {},
        applications: {},
        scannedCount: 0,
        errorCount: 0
    };
    
    // 存储扫描任务
    const task = {
        ws,
        drivePath,
        scanDepth,
        stats: scanStats,
        abort: false,
        startTime: Date.now()
    };
    
    scanTasks.set(taskId, task);
    
    // 发送任务开始消息
    ws.send(JSON.stringify({
        type: 'scan_started',
        payload: { taskId }
    }));
    
    // 异步开始扫描
    scanDirectory(drivePath, 1, scanDepth, scanStats, task)
        .then(() => {
            // 扫描完成
            if (!task.abort) {
                ws.send(JSON.stringify({
                    type: 'scan_complete',
                    payload: {
                        taskId,
                        stats: formatScanResults(scanStats),
                        duration: Math.round((Date.now() - task.startTime) / 1000)
                    }
                }));
            }
            // 从任务列表中移除
            scanTasks.delete(taskId);
        })
        .catch((error) => {
            console.error('扫描过程中出错:', error);
            if (!task.abort) {
                ws.send(JSON.stringify({
                    type: 'scan_error',
                    payload: {
                        taskId,
                        error: error.message
                    }
                }));
            }
            scanTasks.delete(taskId);
        });
}

// 停止扫描任务
function stopScan(taskId) {
    const task = scanTasks.get(taskId);
    if (task) {
        task.abort = true;
        task.ws.send(JSON.stringify({
            type: 'scan_stopped',
            payload: { taskId }
        }));
        scanTasks.delete(taskId);
    }
}

// 递归扫描目录
async function scanDirectory(dirPath, currentDepth, maxDepth, stats, task) {
    // 检查是否需要中止扫描
    if (task.abort) {
        throw new Error('扫描已中止');
    }
    
    try {
        const entries = fs.readdirSync(dirPath, { withFileTypes: true });
        
        for (const entry of entries) {
            // 检查是否需要中止扫描
            if (task.abort) {
                throw new Error('扫描已中止');
            }
            
            const fullPath = path.join(dirPath, entry.name);
            
            try {
                if (entry.isDirectory()) {
                    // 统计文件夹（简化处理，实际大小会在后续计算）
                    const folderName = getFolderName(fullPath);
                    if (!stats.folders[folderName]) {
                        stats.folders[folderName] = 0;
                    }
                    
                    // 递归扫描子目录，直到达到最大深度
                    if (currentDepth < maxDepth) {
                        await scanDirectory(fullPath, currentDepth + 1, maxDepth, stats, task);
                    }
                } else if (entry.isFile()) {
                    // 获取文件信息
                    const fileStats = fs.statSync(fullPath);
                    const size = fileStats.size;
                    const extension = path.extname(entry.name).toLowerCase().slice(1); // 获取扩展名（不含点）
                    
                    // 更新统计信息
                    stats.totalFiles++;
                    stats.totalSize += size;
                    
                    // 文件类型统计
                    if (!stats.fileTypes[extension]) {
                        stats.fileTypes[extension] = {
                            count: 0,
                            size: 0,
                            description: getFileDescription(extension)
                        };
                    }
                    stats.fileTypes[extension].count++;
                    stats.fileTypes[extension].size += size;
                    
                    // 应用程序统计（简化：.exe文件视为应用程序）
                    if (extension === 'exe' && fullPath.includes('Program Files')) {
                        const appName = path.basename(fullPath, '.exe');
                        if (!stats.applications[appName]) {
                            stats.applications[appName] = 0;
                        }
                        stats.applications[appName] += size;
                    }
                    
                    // 更新文件夹大小
                    const folderName = getFolderName(path.dirname(fullPath));
                    stats.folders[folderName] += size;
                    
                    // 每扫描100个文件发送进度更新
                    stats.scannedCount++;
                    if (stats.scannedCount % 100 === 0) {
                        task.ws.send(JSON.stringify({
                            type: 'scan_progress',
                            payload: {
                                taskId: Array.from(scanTasks.entries()).find(([_, t]) => t === task)[0],
                                scannedCount: stats.scannedCount,
                                totalSize: stats.totalSize,
                                errorCount: stats.errorCount
                            }
                        }));
                    }
                }
            } catch (error) {
                // 处理权限错误等异常
                console.warn(`无法访问 ${fullPath}:`, error.message);
                stats.errorCount++;
                // 继续扫描其他文件，不中断整个过程
                continue;
            }
        }
    } catch (error) {
        console.error(`扫描目录 ${dirPath} 时出错:`, error);
        stats.errorCount++;
        // 继续扫描，不中断整个过程
    }
}

// 获取文件夹名称（用于统计）
function getFolderName(folderPath) {
    // 简化处理：获取路径的最后一部分
    const parts = folderPath.split(path.sep).filter(Boolean);
    // 如果路径是空的，返回根目录
    if (parts.length === 0) return '根目录';
    
    // 对于Program Files中的文件夹，尝试获取程序名称
    if (folderPath.includes('Program Files')) {
        // 尝试提取程序名称（假设Program Files下一级就是程序文件夹）
        const programFilesIndex = parts.findIndex(part => 
            part.includes('Program Files')
        );
        if (programFilesIndex !== -1 && programFilesIndex + 1 < parts.length) {
            return parts[programFilesIndex + 1];
        }
    }
    
    return parts[parts.length - 1];
}

// 获取文件类型描述
function getFileDescription(extension) {
    const descriptions = {
        'exe': '可执行文件',
        'dll': '动态链接库',
        'sys': '系统文件',
        'docx': 'Word文档',
        'xlsx': 'Excel表格',
        'pptx': 'PowerPoint演示文稿',
        'pdf': 'PDF文档',
        'txt': '文本文件',
        'jpg': 'JPEG图片',
        'jpeg': 'JPEG图片',
        'png': 'PNG图片',
        'gif': 'GIF图片',
        'bmp': 'BMP图片',
        'mp3': 'MP3音频',
        'wav': 'WAV音频',
        'mp4': 'MP4视频',
        'avi': 'AVI视频',
        'mkv': 'MKV视频',
        'zip': 'ZIP压缩包',
        'rar': 'RAR压缩包',
        '7z': '7Z压缩包',
        'js': 'JavaScript文件',
        'css': 'CSS样式文件',
        'html': 'HTML文件',
        'json': 'JSON文件',
        'xml': 'XML文件',
        'sql': 'SQL文件',
        'php': 'PHP文件',
        'py': 'Python文件',
        'java': 'Java文件',
        'c': 'C语言文件',
        'cpp': 'C++文件',
        'cs': 'C#文件',
        'go': 'Go语言文件',
        'rb': 'Ruby文件',
        'swift': 'Swift文件',
        'kt': 'Kotlin文件',
        'md': 'Markdown文件',
        'log': '日志文件',
        'bak': '备份文件',
        'tmp': '临时文件'
    };
    
    return descriptions[extension] || `${extension.toUpperCase()}文件`;
}

// 格式化扫描结果
function formatScanResults(stats) {
    // 格式化文件类型数据
    const fileTypes = Object.entries(stats.fileTypes)
        .map(([ext, data]) => ({
            name: data.description,
            extension: ext,
            count: data.count,
            size: data.size
        }))
        .sort((a, b) => b.size - a.size); // 按大小排序
    
    // 格式化文件夹数据
    const folders = Object.entries(stats.folders)
        .map(([name, size]) => ({
            name,
            size
        }))
        .sort((a, b) => b.size - a.size); // 按大小排序
    
    // 格式化应用程序数据
    const applications = Object.entries(stats.applications)
        .map(([name, size]) => ({
            name,
            size
        }))
        .sort((a, b) => b.size - a.size); // 按大小排序
    
    return {
        totalFiles: stats.totalFiles,
        totalSize: stats.totalSize,
        fileTypes,
        folders,
        applications,
        errorCount: stats.errorCount
    };
}

################################################################################
# 文件 4/4: public\index.html
################################################################################

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>扫盘大王 - 硬盘空间分析工具</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome -->
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.8/dist/chart.umd.min.js"></script>
    
    <!-- 配置Tailwind颜色和字体 -->
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#3b82f6',
                        secondary: '#10b981',
                        accent: '#f59e0b',
                        danger: '#ef4444',
                        dark: '#1f2937',
                        light: '#f3f4f6'
                    },
                    fontFamily: {
                        sans: ['Inter', 'system-ui', 'sans-serif'],
                    },
                }
            }
        }
    </script>
    
    <!-- 自定义工具类 -->
    <style type="text/tailwindcss">
        @layer utilities {
            .content-auto {
                content-visibility: auto;
            }
            .text-shadow {
                text-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            .card-hover {
                transition: all 0.3s ease;
            }
            .card-hover:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
            }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-light to-white min-h-screen font-sans text-dark">
    <!-- 顶部导航栏 -->
    <header class="bg-white shadow-md sticky top-0 z-50">
        <div class="container mx-auto px-4 py-3 flex items-center justify-between">
            <div class="flex items-center space-x-3">
                <i class="fa fa-hdd-o text-2xl text-primary"></i>
                <h1 class="text-[clamp(1.25rem,3vw,1.75rem)] font-bold text-dark">扫盘大王</h1>
            </div>
            <div class="hidden md:flex items-center space-x-6">
                <a href="#" class="text-dark hover:text-primary transition-colors">主页</a>
                <a href="#" class="text-dark hover:text-primary transition-colors">使用说明</a>
                <a href="#" class="text-dark hover:text-primary transition-colors">关于</a>
            </div>
            <button id="theme-toggle" class="p-2 rounded-full hover:bg-gray-200 transition-colors">
                <i class="fa fa-moon-o text-dark"></i>
            </button>
        </div>
    </header>

    <!-- 主内容区 -->
    <main class="container mx-auto px-4 py-8">
        <!-- 扫描设置区域 -->
        <section class="mb-10 bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl">
            <div class="flex flex-col md:flex-row md:items-center justify-between mb-6">
                <h2 class="text-[clamp(1.1rem,2vw,1.5rem)] font-semibold text-dark mb-4 md:mb-0">扫描设置</h2>
                <div class="flex items-center space-x-2">
                    <i class="fa fa-info-circle text-primary"></i>
                    <span class="text-sm text-gray-600">选择目标硬盘进行扫描分析</span>
                </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <!-- 驱动器选择 -->
                <div class="col-span-1">
                    <label for="drive-select" class="block text-sm font-medium text-gray-700 mb-2">选择驱动器</label>
                    <div class="relative">
                        <select id="drive-select" class="block w-full pl-10 pr-12 py-3 bg-gray-50 border border-gray-300 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary transition-all">
                            <option value="">正在加载驱动器...</option>
                        </select>
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <i class="fa fa-server text-gray-400"></i>
                        </div>
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <i class="fa fa-chevron-down text-gray-400"></i>
                        </div>
                    </div>
                </div>
                
                <!-- 扫描深度 -->
                <div class="col-span-1">
                    <label for="scan-depth" class="block text-sm font-medium text-gray-700 mb-2">扫描深度</label>
                    <div class="relative">
                        <select id="scan-depth" class="block w-full pl-10 pr-12 py-3 bg-gray-50 border border-gray-300 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary transition-all">
                            <option value="1">浅度扫描（快速）</option>
                            <option value="2" selected>中度扫描</option>
                            <option value="3">深度扫描（完整）</option>
                        </select>
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <i class="fa fa-search-plus text-gray-400"></i>
                        </div>
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <i class="fa fa-chevron-down text-gray-400"></i>
                        </div>
                    </div>
                </div>
                
                <!-- 扫描按钮组 -->
                <div class="col-span-1 flex items-end space-x-3">
                    <button id="scan-button" class="flex-1 bg-primary hover:bg-primary/90 text-white font-medium py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition-all flex items-center justify-center space-x-2 group">
                        <i class="fa fa-play-circle-o group-hover:scale-110 transition-transform"></i>
                        <span>开始扫描</span>
                    </button>
                    <button id="stop-button" class="bg-danger hover:bg-danger/90 text-white font-medium py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition-all flex items-center justify-center space-x-2 group hidden">
                        <i class="fa fa-stop-circle-o group-hover:scale-110 transition-transform"></i>
                        <span>停止扫描</span>
                    </button>
                </div>
            </div>
            
            <!-- 扫描进度 -->
            <div id="scan-progress-container" class="mt-6 hidden">
                <div class="flex justify-between items-center mb-2">
                    <span class="text-sm font-medium text-gray-700" id="scan-status-text">准备扫描...</span>
                    <span class="text-sm font-medium text-primary" id="scan-percentage">0%</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2.5">
                    <div id="scan-progress-bar" class="bg-primary h-2.5 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
                <div class="flex justify-between text-xs text-gray-500 mt-2">
                    <span id="scanned-files-info">已扫描: 0 个文件</span>
                    <span id="scanned-size-info">已扫描: 0 B</span>
                </div>
            </div>
        </section>
        
        <!-- 饼图展示区域 -->
        <section id="charts-section" class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-10">
            <!-- 程序占用空间饼图 -->
            <div class="bg-white rounded-xl shadow-lg p-6 card-hover opacity-50" id="apps-chart-card">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-dark flex items-center">
                        <i class="fa fa-pie-chart text-primary mr-2"></i>
                        程序占用空间
                    </h3>
                    <div class="text-xs text-gray-500" id="apps-total-size">0 B</div>
                </div>
                <div class="relative h-64">
                    <canvas id="apps-chart"></canvas>
                </div>
                <div class="mt-4 max-h-40 overflow-y-auto" id="apps-legend-container">
                    <div class="text-center text-gray-500 text-sm" id="apps-placeholder">扫描完成后显示数据</div>
                </div>
            </div>
            
            <!-- 文件类型分布饼图 -->
            <div class="bg-white rounded-xl shadow-lg p-6 card-hover opacity-50" id="types-chart-card">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-dark flex items-center">
                        <i class="fa fa-files-o text-secondary mr-2"></i>
                        文件类型分布
                    </h3>
                    <div class="text-xs text-gray-500" id="types-total-count">0 个文件</div>
                </div>
                <div class="relative h-64">
                    <canvas id="types-chart"></canvas>
                </div>
                <div class="mt-4 max-h-40 overflow-y-auto" id="types-legend-container">
                    <div class="text-center text-gray-500 text-sm" id="types-placeholder">扫描完成后显示数据</div>
                </div>
            </div>
            
            <!-- 文件夹占用空间饼图 -->
            <div class="bg-white rounded-xl shadow-lg p-6 card-hover opacity-50" id="folders-chart-card">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-dark flex items-center">
                        <i class="fa fa-folder-open text-accent mr-2"></i>
                        文件夹占用空间
                    </h3>
                    <div class="text-xs text-gray-500" id="folders-total-size">0 B</div>
                </div>
                <div class="relative h-64">
                    <canvas id="folders-chart"></canvas>
                </div>
                <div class="mt-4 max-h-40 overflow-y-auto" id="folders-legend-container">
                    <div class="text-center text-gray-500 text-sm" id="folders-placeholder">扫描完成后显示数据</div>
                </div>
            </div>
        </section>
        
        <!-- 详细信息表格 -->
        <section id="details-section" class="bg-white rounded-xl shadow-lg p-6 mb-10 opacity-50">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
                <h2 class="text-[clamp(1.1rem,2vw,1.5rem)] font-semibold text-dark flex items-center">
                    <i class="fa fa-table text-primary mr-2"></i>
                    详细数据视图
                </h2>
                
                <div class="flex flex-wrap gap-4 mt-4 md:mt-0">
                    <!-- 数据类型选择 -->
                    <div class="relative">
                        <select id="data-view-select" class="pl-10 pr-12 py-2 border border-gray-300 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary transition-all">
                            <option value="fileTypes">文件类型</option>
                            <option value="folders">文件夹</option>
                            <option value="applications">应用程序</option>
                        </select>
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <i class="fa fa-filter text-gray-400"></i>
                        </div>
                    </div>
                    
                    <!-- 搜索框 -->
                    <div class="relative">
                        <input type="text" id="search-data" placeholder="搜索..." class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
                        <i class="fa fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    </div>
                    
                    <!-- 排序选项 -->
                    <select id="sort-option" class="pl-4 pr-8 py-2 border border-gray-300 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary bg-white">
                        <option value="size-desc">按大小排序（大→小）</option>
                        <option value="size-asc">按大小排序（小→大）</option>
                        <option value="name-asc">按名称排序（A→Z）</option>
                        <option value="name-desc">按名称排序（Z→A）</option>
                    </select>
                </div>
            </div>
            
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr id="table-header">
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">名称</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">大小</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">占比</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">文件数</th>
                        </tr>
                    </thead>
                    <tbody id="data-table-body" class="bg-white divide-y divide-gray-200">
                        <tr>
                            <td colspan="4" class="px-6 py-10 text-center text-gray-500">
                                <i class="fa fa-hdd-o text-4xl mb-3 block opacity-30"></i>
                                <p>扫描完成后显示数据</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <!-- 分页控制 -->
            <div class="flex justify-between items-center mt-6" id="pagination-controls">
                <div class="text-sm text-gray-600">显示 <span id="start-item">0</span>-<span id="end-item">0</span> 项，共 <span id="total-items">0</span> 项</div>
                <div class="flex space-x-2">
                    <button id="prev-page" class="px-3 py-1 border border-gray-300 rounded-md text-sm bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                        <i class="fa fa-chevron-left"></i>
                    </button>
                    <button id="next-page" class="px-3 py-1 border border-gray-300 rounded-md text-sm bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                        <i class="fa fa-chevron-right"></i>
                    </button>
                </div>
            </div>
        </section>
    </main>

    <!-- 页脚 -->
    <footer class="bg-dark text-white py-8">
        <div class="container mx-auto px-4">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="mb-4 md:mb-0">
                    <div class="flex items-center space-x-2">
                        <i class="fa fa-hdd-o text-primary"></i>
                        <span class="font-semibold">扫盘大王</span>
                    </div>
                    <p class="text-sm text-gray-400 mt-1">高效分析硬盘空间使用情况</p>
                </div>
                <div class="flex space-x-6">
                    <a href="#" class="text-gray-400 hover:text-white transition-colors">
                        <i class="fa fa-question-circle-o"></i>
                        <span class="ml-1">帮助</span>
                    </a>
                    <a href="#" class="text-gray-400 hover:text-white transition-colors">
                        <i class="fa fa-github"></i>
                        <span class="ml-1">GitHub</span>
                    </a>
                    <a href="#" class="text-gray-400 hover:text-white transition-colors">
                        <i class="fa fa-envelope-o"></i>
                        <span class="ml-1">联系我们</span>
                    </a>
                </div>
            </div>
            <div class="border-t border-gray-800 mt-6 pt-6 text-center text-sm text-gray-500">
                &copy; 2025 扫盘大王 | 所有权利保留
            </div>
        </div>
    </footer>

    <!-- 脚本部分 -->
    <script>
        // 全局变量
        let ws = null;
        let currentTaskId = null;
        let scanResults = null;
        let currentPage = 1;
        const itemsPerPage = 20;
        let appsChart = null;
        let typesChart = null;
        let foldersChart = null;
        let currentViewType = 'fileTypes';
        
        // DOM 元素引用
        const driveSelect = document.getElementById('drive-select');
        const scanButton = document.getElementById('scan-button');
        const stopButton = document.getElementById('stop-button');
        const scanProgressContainer = document.getElementById('scan-progress-container');
        const scanProgressBar = document.getElementById('scan-progress-bar');
        const scanStatusText = document.getElementById('scan-status-text');
        const scanPercentage = document.getElementById('scan-percentage');
        const scannedFilesInfo = document.getElementById('scanned-files-info');
        const scannedSizeInfo = document.getElementById('scanned-size-info');
        const dataViewSelect = document.getElementById('data-view-select');
        const searchData = document.getElementById('search-data');
        const sortOption = document.getElementById('sort-option');
        const prevPageBtn = document.getElementById('prev-page');
        const nextPageBtn = document.getElementById('next-page');
        const startItem = document.getElementById('start-item');
        const endItem = document.getElementById('end-item');
        const totalItems = document.getElementById('total-items');
        const themeToggle = document.getElementById('theme-toggle');
        const dataTableBody = document.getElementById('data-table-body');
        
        // 初始化函数
        function init() {
            // 加载系统驱动器
            loadDrives();
            
            // 初始化WebSocket连接
            initWebSocket();
            
            // 初始化图表
            initCharts();
            
            // 绑定事件监听器
            scanButton.addEventListener('click', startScan);
            stopButton.addEventListener('click', stopScan);
            dataViewSelect.addEventListener('change', changeDataView);
            searchData.addEventListener('input', filterAndSortData);
            sortOption.addEventListener('change', filterAndSortData);
            prevPageBtn.addEventListener('click', goToPrevPage);
            nextPageBtn.addEventListener('click', goToNextPage);
            themeToggle.addEventListener('click', toggleTheme);
        }
        
        // 加载系统驱动器
        async function loadDrives() {
            try {
                const response = await fetch('/api/drives');
                if (!response.ok) {
                    throw new Error('获取驱动器列表失败');
                }
                const drives = await response.json();
                
                // 清空并填充驱动器选择框
                driveSelect.innerHTML = '';
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = '请选择一个驱动器...';
                driveSelect.appendChild(defaultOption);
                
                drives.forEach(drive => {
                    const option = document.createElement('option');
                    option.value = drive.name;
                    option.textContent = `${drive.name} 本地磁盘`;
                    driveSelect.appendChild(option);
                });
            } catch (error) {
                console.error('加载驱动器失败:', error);
                driveSelect.innerHTML = '';
                const errorOption = document.createElement('option');
                errorOption.value = '';
                errorOption.textContent = '无法加载驱动器列表';
                driveSelect.appendChild(errorOption);
                alert('无法加载驱动器列表: ' + error.message);
            }
        }
        
        // 初始化WebSocket连接
        function initWebSocket() {
            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${wsProtocol}//${window.location.host}`;
            
            ws = new WebSocket(wsUrl);
            
            ws.onopen = () => {
                console.log('WebSocket连接已建立');
            };
            
            ws.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    handleWebSocketMessage(data);
                } catch (error) {
                    console.error('解析WebSocket消息失败:', error);
                }
            };
            
            ws.onclose = () => {
                console.log('WebSocket连接已关闭');
                // 尝试重新连接
                setTimeout(initWebSocket, 5000);
            };
            
            ws.onerror = (error) => {
                console.error('WebSocket错误:', error);
            };
        }
        
        // 处理WebSocket消息
        function handleWebSocketMessage(data) {
            switch (data.type) {
                case 'scan_started':
                    currentTaskId = data.payload.taskId;
                    updateUIForScanStart();
                    break;
                case 'scan_progress':
                    updateScanProgress(data.payload);
                    break;
                case 'scan_complete':
                    scanResults = data.payload.stats;
                    updateUIForScanComplete();
                    break;
                case 'scan_stopped':
                    updateUIForScanStopped();
                    break;
                case 'scan_error':
                    updateUIForScanError(data.payload.error);
                    break;
                default:
                    console.log('未知消息类型:', data.type);
            }
        }
        
        // 初始化图表
        function initCharts() {
            const appsCtx = document.getElementById('apps-chart').getContext('2d');
            const typesCtx = document.getElementById('types-chart').getContext('2d');
            const foldersCtx = document.getElementById('folders-chart').getContext('2d');
            
            // 图表通用配置
            const chartConfig = {
                type: 'doughnut',
                data: {
                    labels: ['暂无数据'],
                    datasets: [{
                        data: [1],
                        backgroundColor: ['#e5e7eb'],
                        borderWidth: 0,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            padding: 12,
                            bodyFont: {
                                size: 12
                            }
                        }
                    }
                }
            };
            
            // 创建图表实例
            appsChart = new Chart(appsCtx, { ...chartConfig });
            typesChart = new Chart(typesCtx, { ...chartConfig });
            foldersChart = new Chart(foldersCtx, { ...chartConfig });
        }
        
        // 开始扫描
        function startScan() {
            const drive = driveSelect.value;
            const scanDepth = parseInt(document.getElementById('scan-depth').value);
            
            if (!drive) {
                alert('请选择一个驱动器');
                return;
            }
            
            if (ws.readyState !== WebSocket.OPEN) {
                alert('WebSocket连接未建立，请稍后再试');
                return;
            }
            
            // 发送扫描请求
            ws.send(JSON.stringify({
                type: 'start_scan',
                payload: {
                    drivePath: drive,
                    scanDepth
                }
            }));
        }
        
        // 停止扫描
        function stopScan() {
            if (!currentTaskId || ws.readyState !== WebSocket.OPEN) {
                return;
            }
            
            ws.send(JSON.stringify({
                type: 'stop_scan',
                payload: {
                    taskId: currentTaskId
                }
            }));
        }
        
        // 更新扫描开始时的UI
        function updateUIForScanStart() {
            // 重置进度条
            scanProgressBar.style.width = '0%';
            scanStatusText.textContent = '开始扫描...';
            scanPercentage.textContent = '0%';
            scannedFilesInfo.textContent = '已扫描: 0 个文件';
            scannedSizeInfo.textContent = '已扫描: 0 B';
            
            // 显示进度条，隐藏图表
            scanProgressContainer.classList.remove('hidden');
            
            // 切换按钮状态
            scanButton.classList.add('hidden');
            stopButton.classList.remove('hidden');
            
            // 禁用驱动器选择
            driveSelect.disabled = true;
            
            // 禁用图表和详情区域
            const cards = document.querySelectorAll('#apps-chart-card, #types-chart-card, #folders-chart-card, #details-section');
            cards.forEach(card => {
                card.classList.add('opacity-50');
            });
        }
        
        // 更新扫描进度
        function updateScanProgress(progress) {
            const { scannedCount, totalSize, errorCount } = progress;
            
            // 估算进度百分比（由于不知道总文件数，这里只是一个参考值）
            // 在实际应用中，后端可以提供更准确的进度信息
            const estimatedPercent = Math.min(95, Math.floor(scannedCount / 100));
            
            scanProgressBar.style.width = estimatedPercent + '%';
            scanPercentage.textContent = estimatedPercent + '%';
            scannedFilesInfo.textContent = `已扫描: ${scannedCount.toLocaleString()} 个文件`;
            scannedSizeInfo.textContent = `已扫描: ${formatBytes(totalSize)}`;
            
            if (errorCount > 0) {
                scanStatusText.textContent = `扫描中... (${errorCount} 个文件访问失败)`;
            } else {
                scanStatusText.textContent = '扫描中...';
            }
        }
        
        // 更新扫描完成时的UI
        function updateUIForScanComplete() {
            // 更新UI状态
            scanProgressBar.style.width = '100%';
            scanPercentage.textContent = '100%';
            scanStatusText.textContent = '扫描完成';
            
            // 切换按钮状态
            scanButton.classList.remove('hidden');
            stopButton.classList.add('hidden');
            
            // 启用驱动器选择
            driveSelect.disabled = false;
            
            // 更新图表和数据表格
            updateCharts();
            updateDataTable();
            
            // 启用图表和详情区域
            const cards = document.querySelectorAll('#apps-chart-card, #types-chart-card, #folders-chart-card, #details-section');
            cards.forEach(card => {
                card.classList.remove('opacity-50');
            });
            
            // 重置当前任务ID
            currentTaskId = null;
        }
        
        // 更新扫描停止时的UI
        function updateUIForScanStopped() {
            scanStatusText.textContent = '扫描已停止';
            
            // 切换按钮状态
            scanButton.classList.remove('hidden');
            stopButton.classList.add('hidden');
            
            // 启用驱动器选择
            driveSelect.disabled = false;
            
            // 重置当前任务ID
            currentTaskId = null;
        }
        
        // 更新扫描错误时的UI
        function updateUIForScanError(error) {
            scanStatusText.textContent = `扫描出错: ${error}`;
            
            // 切换按钮状态
            scanButton.classList.remove('hidden');
            stopButton.classList.add('hidden');
            
            // 启用驱动器选择
            driveSelect.disabled = false;
            
            // 重置当前任务ID
            currentTaskId = null;
            
            alert('扫描过程中发生错误: ' + error);
        }
        
        // 更新图表
        function updateCharts() {
            if (!scanResults) return;
            
            // 1. 程序占用空间饼图数据
            updateChart(appsChart, scanResults.applications, 'apps', scanResults.totalSize);
            document.getElementById('apps-total-size').textContent = formatBytes(scanResults.totalSize);
            
            // 2. 文件类型分布饼图数据
            updateChart(typesChart, scanResults.fileTypes, 'types', scanResults.totalSize);
            document.getElementById('types-total-count').textContent = scanResults.totalFiles.toLocaleString() + ' 个文件';
            
            // 3. 文件夹占用空间饼图数据
            updateChart(foldersChart, scanResults.folders, 'folders', scanResults.totalSize);
            document.getElementById('folders-total-size').textContent = formatBytes(scanResults.totalSize);
            
            // 更新图例
            updateLegend('apps-legend-container', scanResults.applications, 'size', scanResults.totalSize);
            updateLegend('types-legend-container', scanResults.fileTypes, 'size', scanResults.totalSize);
            updateLegend('folders-legend-container', scanResults.folders, 'size', scanResults.totalSize);
        }
        
        // 更新单个图表
        function updateChart(chart, data, type, totalSize) {
            // 处理空数据情况
            if (!data || data.length === 0) {
                chart.data.labels = ['暂无数据'];
                chart.data.datasets[0].data = [1];
                chart.data.datasets[0].backgroundColor = ['#e5e7eb'];
                chart.update();
                return;
            }
            
            // 生成颜色
            const colors = generateColors(Math.min(data.length, 10)); // 限制颜色数量
            
            // 处理大量数据的情况，只显示前N个，其余合并为"其他"
            const maxItems = 8;
            let itemsToDisplay = data;
            let otherValue = 0;
            
            if (data.length > maxItems) {
                itemsToDisplay = data.slice(0, maxItems);
                otherValue = data.slice(maxItems).reduce((sum, item) => sum + item.size, 0);
            }
            
            // 准备图表数据
            const labels = itemsToDisplay.map(item => item.name);
            const values = itemsToDisplay.map(item => item.size);
            
            // 如果有"其他"类别，添加到数据中
            if (otherValue > 0) {
                labels.push('其他');
                values.push(otherValue);
            }
            
            // 更新图表数据
            chart.data.labels = labels;
            chart.data.datasets[0].data = values;
            chart.data.datasets[0].backgroundColor = generateColors(labels.length);
            
            // 更新tooltip根据图表类型显示不同格式
            chart.options.plugins.tooltip.callbacks.label = function(context) {
                let label = context.label || '';
                let value = context.raw || 0;
                let percentage = totalSize > 0 ? Math.round((value / totalSize) * 100) : 0;
                
                if (label) {
                    label += ': ';
                }
                
                return label + formatBytes(value) + ' (' + percentage + '%)';
            };
            
            chart.update();
        }
        
        // 生成颜色数组
        function generateColors(count) {
            const baseColors = [
                '#3b82f6', '#10b981', '#f59e0b', '#ef4444',
                '#8b5cf6', '#ec4899', '#14b8a6', '#f97316',
                '#84cc16', '#6366f1'
            ];
            
            const colors = [];
            for (let i = 0; i < count; i++) {
                colors.push(baseColors[i % baseColors.length]);
            }
            return colors;
        }
        
        // 更新图例
        function updateLegend(containerId, items, valueType, totalValue) {
            const container = document.getElementById(containerId);
            container.innerHTML = '';
            
            if (!items || items.length === 0) {
                container.innerHTML = '<div class="text-center text-gray-500 text-sm">无数据</div>';
                return;
            }
            
            const colors = generateColors(Math.min(items.length, 10));
            
            // 限制显示的项数
            const maxItems = 10;
            const itemsToDisplay = items.slice(0, maxItems);
            
            itemsToDisplay.forEach((item, index) => {
                const legendItem = document.createElement('div');
                legendItem.className = 'flex items-center justify-between py-1 text-sm';
                
                const labelContainer = document.createElement('div');
                labelContainer.className = 'flex items-center';
                
                const colorDot = document.createElement('span');
                colorDot.className = 'w-3 h-3 rounded-full mr-2';
                colorDot.style.backgroundColor = colors[index];
                
                const label = document.createElement('span');
                label.textContent = item.name;
                label.title = item.name; // 添加悬停提示
                
                const valueContainer = document.createElement('div');
                valueContainer.className = 'text-right';
                
                const value = document.createElement('span');
                value.className = 'font-medium';
                value.textContent = formatBytes(item.size);
                
                const percentage = document.createElement('span');
                percentage.className = 'text-xs text-gray-500 block';
                percentage.textContent = totalValue > 0 ? 
                    `(${Math.round((item.size / totalValue) * 100)}%)` : 
                    '(0%)';
                
                valueContainer.appendChild(value);
                valueContainer.appendChild(percentage);
                labelContainer.appendChild(colorDot);
                labelContainer.appendChild(label);
                legendItem.appendChild(labelContainer);
                legendItem.appendChild(valueContainer);
                
                container.appendChild(legendItem);
            });
            
            // 如果有更多项，添加"显示更多"提示
            if (items.length > maxItems) {
                const moreItem = document.createElement('div');
                moreItem.className = 'text-center text-xs text-gray-500 mt-2 italic';
                moreItem.textContent = `还有 ${items.length - maxItems} 项未显示`;
                container.appendChild(moreItem);
            }
        }
        
        // 更改数据视图类型
        function changeDataView() {
            currentViewType = dataViewSelect.value;
            currentPage = 1; // 重置到第一页
            filterAndSortData();
        }
        
        // 过滤和排序数据
        function filterAndSortData() {
            if (!scanResults) return;
            
            const query = searchData.value.toLowerCase();
            const sortBy = sortOption.value;
            
            // 获取当前视图类型的数据
            let data = [];
            switch (currentViewType) {
                case 'fileTypes':
                    data = [...scanResults.fileTypes];
                    break;
                case 'folders':
                    data = [...scanResults.folders];
                    break;
                case 'applications':
                    data = [...scanResults.applications];
                    break;
            }
            
            // 应用过滤
            const filteredData = data.filter(item => 
                item.name.toLowerCase().includes(query)
            );
            
            // 应用排序
            let sortedData;
            switch (sortBy) {
                case 'size-desc':
                    sortedData = [...filteredData].sort((a, b) => b.size - a.size);
                    break;
                case 'size-asc':
                    sortedData = [...filteredData].sort((a, b) => a.size - b.size);
                    break;
                case 'name-asc':
                    sortedData = [...filteredData].sort((a, b) => a.name.localeCompare(b.name));
                    break;
                case 'name-desc':
                    sortedData = [...filteredData].sort((a, b) => b.name.localeCompare(a.name));
                    break;
                default:
                    sortedData = filteredData;
            }
            
            // 渲染表格
            renderDataTable(sortedData);
        }
        
        // 更新数据表格
        function updateDataTable() {
            currentPage = 1;
            filterAndSortData();
        }
        
        // 渲染数据表格
        function renderDataTable(data) {
            const total = data.length;
            const start = (currentPage - 1) * itemsPerPage;
            const end = Math.min(start + itemsPerPage, total);
            const paginatedData = data.slice(start, end);
            
            // 更新分页信息
            startItem.textContent = total > 0 ? start + 1 : 0;
            endItem.textContent = end;
            totalItems.textContent = total;
            
            // 更新分页按钮状态
            prevPageBtn.disabled = currentPage === 1;
            nextPageBtn.disabled = end >= total;
            
            // 清空表格
            dataTableBody.innerHTML = '';
            
            if (paginatedData.length === 0) {
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = `
                    <td colspan="4" class="px-6 py-10 text-center text-gray-500">
                        <i class="fa fa-search text-4xl mb-3 block opacity-30"></i>
                        <p>没有找到匹配的数据</p>
                    </td>
                `;
                dataTableBody.appendChild(emptyRow);
                return;
            }
            
            // 渲染数据行
            paginatedData.forEach(item => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 transition-colors';
                
                // 计算百分比
                const percentage = scanResults.totalSize > 0 ? 
                    Math.round((item.size / scanResults.totalSize) * 100) : 0;
                
                // 根据当前视图类型显示不同的列
                let fileCountHtml = '<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">-</td>';
                if (currentViewType === 'fileTypes' && item.count !== undefined) {
                    fileCountHtml = `<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${item.count.toLocaleString()}</td>`;
                }
                
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <i class="fa ${getIconForItem(item)} mr-3"></i>
                            <div class="text-sm font-medium text-gray-900 truncate max-w-xs" title="${item.name}">${item.name}</div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">${formatBytes(item.size)}</div>
                    </td>
                    <td class="px-6 py-4">
                        <div class="flex items-center">
                            <div class="w-full bg-gray-200 rounded-full h-2 mr-2">
                                <div class="bg-primary h-2 rounded-full" style="width: ${percentage}%"></div>
                            </div>
                            <span class="text-xs text-gray-500 whitespace-nowrap">${percentage}%</span>
                        </div>
                    </td>
                    ${fileCountHtml}
                `;
                
                dataTableBody.appendChild(row);
            });
        }
        
        // 获取项目对应的图标
        function getIconForItem(item) {
            switch (currentViewType) {
                case 'fileTypes':
                    if (item.extension) {
                        const ext = item.extension.toLowerCase();
                        if (['jpg', 'jpeg', 'png', 'gif', 'bmp'].includes(ext)) {
                            return 'fa-file-image-o text-primary';
                        } else if (['mp3', 'wav', 'flac'].includes(ext)) {
                            return 'fa-file-audio-o text-secondary';
                        } else if (['mp4', 'avi', 'mkv', 'mov'].includes(ext)) {
                            return 'fa-file-video-o text-accent';
                        } else if (['doc', 'docx'].includes(ext)) {
                            return 'fa-file-word-o text-blue-600';
                        } else if (['xls', 'xlsx'].includes(ext)) {
                            return 'fa-file-excel-o text-green-600';
                        } else if (['ppt', 'pptx'].includes(ext)) {
                            return 'fa-file-powerpoint-o text-red-600';
                        } else if (['pdf'].includes(ext)) {
                            return 'fa-file-pdf-o text-danger';
                        } else if (['zip', 'rar', '7z'].includes(ext)) {
                            return 'fa-file-archive-o text-yellow-600';
                        } else if (['exe'].includes(ext)) {
                            return 'fa-file-exe-o text-red-500';
                        } else if (['txt', 'md'].includes(ext)) {
                            return 'fa-file-text-o text-gray-500';
                        } else if (['js', 'css', 'html', 'php', 'py', 'java', 'c', 'cpp'].includes(ext)) {
                            return 'fa-file-code-o text-purple-600';
                        }
                    }
                    return 'fa-file-o text-gray-400';
                case 'folders':
                    return 'fa-folder text-yellow-500';
                case 'applications':
                    return 'fa-cube text-blue-500';
                default:
                    return 'fa-file-o text-gray-400';
            }
        }
        
        // 翻页功能
        function goToPrevPage() {
            if (currentPage > 1) {
                currentPage--;
                filterAndSortData();
            }
        }
        
        function goToNextPage() {
            const query = searchData.value.toLowerCase();
            let data = [];
            
            // 获取当前视图类型的数据
            switch (currentViewType) {
                case 'fileTypes':
                    data = scanResults.fileTypes;
                    break;
                case 'folders':
                    data = scanResults.folders;
                    break;
                case 'applications':
                    data = scanResults.applications;
                    break;
            }
            
            // 应用过滤
            const filteredData = data.filter(item => 
                item.name.toLowerCase().includes(query)
            );
            
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                filterAndSortData();
            }
        }
        
        // 格式化字节数
        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';
            
            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
            
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }
        
        // 切换主题
        function toggleTheme() {
            document.body.classList.toggle('dark-mode');
            const isDark = document.body.classList.contains('dark-mode');
            
            if (isDark) {
                themeToggle.innerHTML = '<i class="fa fa-sun-o text-yellow-400"></i>';
                document.body.classList.add('bg-dark', 'text-white');
                document.body.classList.remove('bg-gradient-to-br', 'from-light', 'to-white');
                
                // 更新卡片背景色
                document.querySelectorAll('.bg-white').forEach(el => {
                    el.classList.remove('bg-white');
                    el.classList.add('bg-gray-800');
                });
            } else {
                themeToggle.innerHTML = '<i class="fa fa-moon-o text-dark"></i>';
                document.body.classList.remove('bg-dark', 'text-white');
                document.body.classList.add('bg-gradient-to-br', 'from-light', 'to-white');
                
                // 恢复卡片背景色
                document.querySelectorAll('.bg-gray-800').forEach(el => {
                    el.classList.remove('bg-gray-800');
                    el.classList.add('bg-white');
                });
            }
        }
        
        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>



################################################################################
# 文件 4/6: README.md
################################################################################

# 扫盘大王 - 硬盘空间分析工具

一个基于 Node.js 和 WebSocket 的硬盘空间分析工具，能够实时扫描硬盘并可视化展示文件类型、文件夹和应用程序的空间占用情况。

## 功能特点

- **实时扫描**：使用 Node.js 递归扫描硬盘，通过 WebSocket 推送扫描进度
- **数据可视化**：使用 Chart.js 生成三种环形饼图展示不同维度的数据分布
- **文件类型分析**：自动识别并统计不同文件类型的空间占用
- **文件夹占用统计**：分析各个文件夹的空间使用情况
- **应用程序识别**：自动识别并统计应用程序占用空间
- **响应式设计**：适配不同屏幕尺寸的设备
- **交互界面**：支持搜索、排序、分页等交互操作
- **权限处理**：对无访问权限的文件进行容错处理

## 技术栈

- **后端**：Node.js, Express, WebSocket (ws)
- **前端**：HTML5, JavaScript, Tailwind CSS, Chart.js
- **通信**：WebSocket 实时数据传输

## 安装指南

### 1. 安装 Node.js

在运行本应用之前，需要先安装 Node.js。请按照以下步骤操作：

1. 访问 [Node.js 官方网站](https://nodejs.org/zh-cn/)
2. 下载并安装适合您操作系统的 LTS 版本
3. 安装完成后，打开命令提示符或终端，验证安装是否成功：

```bash
node -v
npm -v
```

### 2. 安装项目依赖

进入项目目录，运行以下命令安装所需依赖：

```bash
npm install
```

### 3. 运行应用

安装完成后，使用以下命令启动应用：

```bash
npm start
```

### 4. 访问应用

启动成功后，打开浏览器并访问：

```
http://localhost:3000
```

## 使用说明

1. **选择驱动器**：从下拉菜单中选择要扫描的硬盘驱动器
2. **设置扫描深度**：
   - 浅度扫描：快速扫描顶层目录
   - 中度扫描：扫描到第二层或第三层目录
   - 深度扫描：完整扫描整个驱动器
3. **开始扫描**：点击"开始扫描"按钮启动扫描过程
4. **查看进度**：扫描过程中会实时显示进度条和统计信息
5. **分析结果**：扫描完成后，可以通过以下方式查看结果：
   - 环形饼图：直观展示文件类型、文件夹和应用程序的空间占用
   - 详细数据表：提供搜索、排序和分页功能，方便查看详细信息

## 注意事项

- **扫描权限**：某些系统文件或受保护目录可能无法访问，应用会自动跳过这些文件
- **扫描时间**：完整扫描大型硬盘可能需要较长时间，请耐心等待
- **资源占用**：深度扫描可能会占用较多系统资源

## 开发命令

- **启动开发服务器**：
  ```bash
  npm run dev
  ```
  (使用 nodemon 自动重启服务器)

- **启动生产服务器**：
  ```bash
  npm start
  ```

## 目录结构

```
├── public/             # 静态资源目录
│   └── index.html      # 前端页面
├── server.js           # 后端服务器代码
├── package.json        # 项目配置和依赖
└── README.md           # 项目说明文档
```

## License

MIT

################################################################################
# 文件 5/6: server.js
################################################################################

const express = require('express');
const fs = require('fs');
const path = require('path');
const { WebSocketServer } = require('ws');
const os = require('os');
const child_process = require('child_process');

const app = express();
const PORT = 3000;

// 静态文件服务
app.use(express.static(path.join(__dirname, 'public')));

// API接口：获取系统驱动器列表
app.get('/api/drives', (req, res) => {
    try {
        let drives = [];
        
        if (os.platform() === 'win32') {
            try {
                // Windows系统获取驱动器 - 主要方法
                const result = child_process.execSync('wmic logicaldisk get caption').toString();
                const driveList = result.match(/[A-Z]:/g) || [];
                drives = driveList.map(drive => ({ name: drive, path: drive + '\\', type: 'local' }));
                console.log('通过wmic获取到驱动器:', drives);
            } catch (wmicError) {
                console.warn('wmic命令执行失败，尝试备选方法:', wmicError.message);
                // 备选方法：尝试直接访问常见驱动器
                const commonDrives = ['C', 'D', 'E', 'F', 'G'];
                for (const letter of commonDrives) {
                    try {
                        const drivePath = letter + ':';
                        fs.accessSync(drivePath);
                        drives.push({ name: drivePath, path: drivePath + '\\', type: 'local' });
                        console.log(`检测到可访问驱动器: ${drivePath}`);
                    } catch (accessError) {
                        // 驱动器不存在或无法访问，忽略
                    }
                }
                
                // 如果还是没有找到驱动器，添加一个默认的C盘
                if (drives.length === 0) {
                    drives.push({ name: 'C:', path: 'C:\\', type: 'local' });
                    console.log('未找到实际驱动器，使用默认C盘');
                }
            }
        } else {
            // Unix/Linux系统获取挂载点
            try {
                const result = child_process.execSync('df -h').toString();
                const lines = result.split('\n').slice(1);
                drives = lines
                    .filter(line => line.trim())
                    .map(line => {
                        const parts = line.split(/\s+/);
                        return { name: parts[5], path: parts[5], type: 'local' };
                    });
            } catch (unixError) {
                console.error('Unix系统获取驱动器失败:', unixError);
                drives = [{ name: '/', path: '/', type: 'local' }];
            }
        }
        
        res.json(drives);
    } catch (error) {
        console.error('获取驱动器列表失败:', error);
        // 返回一个包含默认驱动器的错误响应
        res.status(500).json({ 
            error: '获取驱动器列表失败', 
            message: error.message,
            drives: [{ name: 'C:', path: 'C:\\', type: 'local' }] // 默认返回C盘
        });
    }
})

// 启动HTTP服务器
const server = app.listen(PORT, () => {
    console.log(`服务器运行在 http://localhost:${PORT}`);
});

// 创建WebSocket服务器
const wss = new WebSocketServer({ server });

// 存储活跃的扫描任务
const scanTasks = new Map();

// WebSocket连接处理
wss.on('connection', (ws) => {
    console.log('客户端已连接');
    
    // 客户端消息处理
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            
            switch (data.type) {
                case 'start_scan':
                    startScan(ws, data.payload);
                    break;
                case 'stop_scan':
                    stopScan(data.payload.taskId);
                    break;
                default:
                    console.log('未知消息类型:', data.type);
            }
        } catch (error) {
            console.error('处理消息时出错:', error);
        }
    });
    
    // 连接关闭处理
    ws.on('close', () => {
        console.log('客户端已断开连接');
        // 清理该客户端的所有扫描任务
        for (const [taskId, task] of scanTasks.entries()) {
            if (task.ws === ws) {
                task.abort = true;
                scanTasks.delete(taskId);
            }
        }
    });
});

// 开始扫描任务
function startScan(ws, payload) {
    const { drivePath, scanDepth = 2 } = payload || {};
    const taskId = Date.now().toString();
    console.log(`开始扫描任务 ${taskId}，路径: ${drivePath}，深度: ${scanDepth}`);
    
    // 确保路径存在且有效
    if (!drivePath || !fs.existsSync(drivePath)) {
        console.error(`扫描路径无效: ${drivePath}`);
        ws.send(JSON.stringify({
            type: 'scan_error',
            payload: {
                taskId,
                error: `扫描路径无效: ${drivePath}`
            }
        }));
        return;
    }
    
    // 初始化扫描统计数据
    const scanStats = {
        totalFiles: 0,
        totalSize: 0,
        fileTypes: {},
        folders: {},
        applications: {},
        scannedCount: 0,
        errorCount: 0
    };
    
    // 存储扫描任务
    const task = {
        ws,
        drivePath,
        scanDepth,
        stats: scanStats,
        abort: false,
        startTime: Date.now()
    };
    
    scanTasks.set(taskId, task);
    
    // 发送任务开始消息
    ws.send(JSON.stringify({
        type: 'scan_started',
        payload: { taskId }
    }));
    
    // 异步开始扫描
    scanDirectory(drivePath, 1, scanDepth, scanStats, task, taskId)
        .then(() => {
            // 扫描完成
            if (!task.abort) {
                ws.send(JSON.stringify({
                    type: 'scan_complete',
                    payload: {
                        taskId,
                        stats: formatScanResults(scanStats),
                        duration: Math.round((Date.now() - task.startTime) / 1000)
                    }
                }));
            }
            // 从任务列表中移除
            scanTasks.delete(taskId);
        })
        .catch((error) => {
            console.error('扫描过程中出错:', error);
            if (!task.abort) {
                ws.send(JSON.stringify({
                    type: 'scan_error',
                    payload: {
                        taskId,
                        error: error.message
                    }
                }));
            }
            scanTasks.delete(taskId);
        });
}

// 停止扫描任务
function stopScan(taskId) {
    const task = scanTasks.get(taskId);
    if (task) {
        task.abort = true;
        task.ws.send(JSON.stringify({
            type: 'scan_stopped',
            payload: { taskId }
        }));
        scanTasks.delete(taskId);
    }
}

// 递归扫描目录
async function scanDirectory(dirPath, currentDepth, maxDepth, stats, task, taskId) {
    console.log(`开始扫描目录: ${dirPath}, 深度: ${currentDepth}`);
    
    // 检查是否需要中止扫描
    if (task.abort) {
        console.log(`扫描任务 ${taskId} 已中止`);
        throw new Error('扫描已中止');
    }
    
    // 确保路径存在且有效
    if (!dirPath || !fs.existsSync(dirPath)) {
        console.error(`扫描路径无效: ${dirPath}`);
        stats.errorCount++;
        return;
    }
    
    try {
        // 规范化路径
        const normalizedPath = path.normalize(dirPath);
        
        // 检查路径是否存在且可读
        if (!fs.existsSync(normalizedPath)) {
            console.warn(`路径不存在: ${normalizedPath}`);
            stats.errorCount++;
            return;
        }
        
        // 检查权限
        try {
            fs.accessSync(normalizedPath, fs.constants.R_OK);
        } catch (accessError) {
            console.warn(`无权限访问路径: ${normalizedPath}`);
            stats.errorCount++;
            return;
        }
        
        // 使用try-catch处理readdirSync可能的异常
        let entries;
        try {
            entries = fs.readdirSync(normalizedPath, { withFileTypes: true });
        } catch (readError) {
            console.error(`读取目录出错: ${normalizedPath}`, readError.message);
            stats.errorCount++;
            return;
        }
        
        for (const entry of entries) {
            // 检查是否需要中止扫描
            if (task.abort) {
                console.log(`扫描任务 ${taskId} 已中止`);
                throw new Error('扫描已中止');
            }
            
            const fullPath = path.join(dirPath, entry.name);
            
            try {
                if (entry.isDirectory()) {
                    // 统计文件夹，使用完整路径作为键
                    if (!stats.folders[fullPath]) {
                        stats.folders[fullPath] = {
                            name: getFolderName(fullPath),
                            path: fullPath,
                            size: 0
                        };
                    }
                    console.log(`找到文件夹: ${fullPath}`);
                    
                    // 递归扫描子目录，直到达到最大深度
                    if (currentDepth < maxDepth) {
                        await scanDirectory(fullPath, currentDepth + 1, maxDepth, stats, task, taskId);
                    }
                } else if (entry.isFile()) {
                    // 获取文件信息
                    const fileStats = fs.statSync(fullPath);
                    const size = fileStats.size;
                    
                    // 修复文件扩展名获取逻辑
                    let extension = path.extname(entry.name).toLowerCase();
                    if (extension.startsWith('.')) {
                        extension = extension.slice(1); // 移除前导点
                    }
                    extension = extension || '无扩展名'; // 如果没有扩展名
                    
                    // 更新统计信息
                    stats.totalFiles++;
                    stats.totalSize += size;
                    
                    // 文件类型统计 - 修复数据存储格式
                    if (!stats.fileTypes[extension]) {
                        stats.fileTypes[extension] = {
                            name: extension,  // 添加名称字段
                            count: 0,
                            size: 0,
                            description: getFileDescription(extension)
                        };
                    }
                    stats.fileTypes[extension].count++;
                    stats.fileTypes[extension].size += size;
                    
                    // 添加调试日志
                    console.log(`文件: ${entry.name}, 扩展名: ${extension}, 大小: ${size}, 类型描述: ${getFileDescription(extension)}`);
                    
                            // 扩展应用程序识别逻辑
                    const isExecutable = ['exe', 'msi', 'app', 'dmg', 'pkg', 'appx', 'msix', 'com'].includes(extension);
                    const isInAppDirectory = fullPath.toLowerCase().includes('program files') || 
                                           fullPath.toLowerCase().includes('applications') ||
                                           fullPath.toLowerCase().includes('appdata') ||
                                           fullPath.toLowerCase().includes('windows\\system32');
                    // 简化应用识别，增加更多常见应用目录
                    
                    // 应用程序统计
                    if (isExecutable || isInAppDirectory) {
                        const appName = path.basename(fullPath, `.${extension}`);
                        if (!stats.applications[appName]) {
                            stats.applications[appName] = {
                                name: appName,
                                path: fullPath,
                                size: 0
                            };
                        }
                        stats.applications[appName].size += size;
                    }
                    
                    // 更新文件夹大小 - 使用完整路径作为键，确保准确性
                    const folderPath = path.dirname(fullPath);
                    const folderKey = folderPath; // 使用完整路径作为键
                    
                    // 确保文件夹对象存在
                    if (!stats.folders[folderKey]) {
                        stats.folders[folderKey] = {
                            name: getFolderName(folderPath),
                            path: folderPath,
                            size: 0
                        };
                    }
                    console.log(`找到文件: ${fullPath}, 大小: ${size} 字节`);
                    stats.folders[folderKey].size += size;
                    
                    // 同时更新父文件夹大小，实现正确的文件夹大小累积
                    let parentPath = path.dirname(folderPath);
                    // 修复：正确判断父文件夹遍历终止条件
                    while (parentPath && parentPath !== folderPath && 
                           parentPath.length >= task.drivePath.length && 
                           parentPath.startsWith(task.drivePath)) {
                        const parentKey = parentPath;
                        if (!stats.folders[parentKey]) {
                            stats.folders[parentKey] = {
                                name: getFolderName(parentPath),
                                path: parentPath,
                                size: 0
                            };
                        }
                        stats.folders[parentKey].size += size;
                        // 向上遍历父目录
                        const newParent = path.dirname(parentPath);
                        if (newParent === parentPath) break; // 防止无限循环
                        parentPath = newParent;
                    }
                    
                    // 每扫描50个文件发送进度更新，更及时
                    stats.scannedCount++;
                    if (stats.scannedCount % 50 === 0) {
                        // 直接使用传入的taskId
                        if (taskId && task.ws.readyState === 1) { // 确保WebSocket连接正常
                            task.ws.send(JSON.stringify({
                                type: 'scan_progress',
                                payload: {
                                    taskId: taskId,
                                    scannedCount: stats.scannedCount,
                                    totalSize: stats.totalSize,
                                    errorCount: stats.errorCount,
                                    currentPath: fullPath,
                                    percentage: Math.min(99, Math.floor(stats.scannedCount / 100)) // 简单估算进度
                                }
                            }));
                        }
                    }
                }
            } catch (error) {
                // 处理权限错误等异常
                console.warn(`无法访问 ${fullPath}:`, error.message);
                stats.errorCount++;
                // 继续扫描其他文件，不中断整个过程
                continue;
            }
        }
    } catch (error) {
        console.error(`扫描目录 ${dirPath} 时出错:`, error);
        stats.errorCount++;
        // 继续扫描，不中断整个过程
    }
}

// 获取文件夹名称（用于统计）
function getFolderName(folderPath) {
    // 确保路径有效
    if (!folderPath) return '未知文件夹';
    
    try {
        // 简化处理：获取路径的最后一部分
        const parts = folderPath.split(path.sep).filter(Boolean);
        
        // 如果路径是空的，返回根目录
        if (parts.length === 0) return '根目录';
        
        // 对于常见的系统目录，使用更友好的名称
        const folderName = parts[parts.length - 1];
        const systemFolderNames = {
            'Program Files': '程序文件',
            'Program Files (x86)': '程序文件(x86)',
            'Windows': '系统文件夹',
            'Users': '用户文件夹',
            'AppData': '应用数据',
            'Documents': '我的文档',
            'Desktop': '桌面',
            'Downloads': '下载',
            'Pictures': '图片',
            'Music': '音乐',
            'Videos': '视频'
        };
        
        if (systemFolderNames[folderName]) {
            return systemFolderNames[folderName];
        }
        
        // 对于Program Files中的文件夹，尝试获取程序名称
        if (folderPath && folderPath.toLowerCase().includes('program files')) {
            // 尝试提取程序名称
            const programFilesIndex = parts.findIndex(part => 
                part.toLowerCase().includes('program files')
            );
            if (programFilesIndex !== -1 && programFilesIndex + 1 < parts.length) {
                return parts[programFilesIndex + 1];
            }
        }
        
        // 返回路径的最后一部分作为文件夹名称
        return folderName;
    } catch (error) {
        console.error('获取文件夹名称出错:', error);
        return '未知文件夹';
    }
}

// 获取文件类型描述
function getFileDescription(extension) {
    const descriptions = {
        'exe': '可执行文件',
        'dll': '动态链接库',
        'sys': '系统文件',
        'docx': 'Word文档',
        'xlsx': 'Excel表格',
        'pptx': 'PowerPoint演示文稿',
        'pdf': 'PDF文档',
        'txt': '文本文件',
        'jpg': 'JPEG图片',
        'jpeg': 'JPEG图片',
        'png': 'PNG图片',
        'gif': 'GIF图片',
        'bmp': 'BMP图片',
        'mp3': 'MP3音频',
        'wav': 'WAV音频',
        'mp4': 'MP4视频',
        'avi': 'AVI视频',
        'mkv': 'MKV视频',
        'zip': 'ZIP压缩包',
        'rar': 'RAR压缩包',
        '7z': '7Z压缩包',
        'js': 'JavaScript文件',
        'css': 'CSS样式文件',
        'html': 'HTML文件',
        'json': 'JSON文件',
        'xml': 'XML文件',
        'sql': 'SQL文件',
        'php': 'PHP文件',
        'py': 'Python文件',
        'java': 'Java文件',
        'c': 'C语言文件',
        'cpp': 'C++文件',
        'cs': 'C#文件',
        'go': 'Go语言文件',
        'rb': 'Ruby文件',
        'swift': 'Swift文件',
        'kt': 'Kotlin文件',
        'md': 'Markdown文件',
        'log': '日志文件',
        'bak': '备份文件',
        'tmp': '临时文件'
    };
    
    return descriptions[extension] || `${extension.toUpperCase()}文件`;
}

// 格式化扫描结果
function formatScanResults(stats) {
    console.log('开始格式化扫描结果:', {
        totalFiles: stats.totalFiles,
        totalSize: stats.totalSize,
        fileTypeCount: Object.keys(stats.fileTypes).length,
        folderCount: Object.keys(stats.folders).length,
        appCount: Object.keys(stats.applications).length
    });
    
    // 格式化文件类型数据 - 修复数据映射
    const fileTypes = Object.entries(stats.fileTypes)
        .map(([ext, data]) => {
            console.log(`格式化文件类型: ${ext}, 数据:`, data);
            return {
                name: data.name || ext,  // 使用存储的名称或扩展名
                type: ext,
                description: data.description || getFileDescription(ext),
                count: data.count || 0,
                size: data.size || 0
            };
        })
        .filter(item => item.size > 0) // 确保只包含有大小的项目
        .sort((a, b) => b.size - a.size) // 按大小排序
        .slice(0, 20); // 只返回前20个最主要的类型
    
    // 格式化文件夹数据 - 修正处理对象格式的文件夹数据
    const folders = Object.entries(stats.folders)
        .map(([key, folderData]) => {
            // 检查folderData是对象还是数字
            if (typeof folderData === 'object' && folderData !== null) {
                return {
                    name: folderData.name,
                    path: folderData.path,
                    size: folderData.size
                };
            } else {
                // 兼容旧格式
                return {
                    name: key,
                    size: folderData
                };
            }
        })
        .filter(item => item.size > 0 && item.name) // 确保只包含有效的文件夹
        .sort((a, b) => b.size - a.size) // 按大小排序
        .slice(0, 20); // 只返回前20个最大的文件夹
    
    // 格式化应用程序数据
    const applications = Object.entries(stats.applications)
        .map(([key, appData]) => {
            // 检查appData是对象还是数字
            if (typeof appData === 'object' && appData !== null) {
                return {
                    name: appData.name,
                    path: appData.path,
                    size: appData.size
                };
            } else {
                // 兼容旧格式
                return {
                    name: key,
                    size: appData
                };
            }
        })
        .filter(item => item.size > 0) // 确保只包含有大小的应用
        .sort((a, b) => b.size - a.size) // 按大小排序
        .slice(0, 20); // 只返回前20个最大的应用
    
    console.log('格式化完成:', {
        fileTypesCount: fileTypes.length,
        foldersCount: folders.length,
        applicationsCount: applications.length
    });
    
    // 如果没有应用程序数据，添加一个虚拟项目避免前端显示空白
    if (applications.length === 0) {
        applications.push({
            name: '未识别应用',
            size: 1 // 给一个很小的大小，避免图表显示问题
        });
    }
    
    return {
        totalFiles: stats.totalFiles,
        totalSize: stats.totalSize,
        fileTypes,
        folders,
        applications,
        errorCount: stats.errorCount
    };
}

################################################################################
# 文件 6/6: public\index.html
################################################################################

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>扫盘大王 - 硬盘空间分析工具</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome -->
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.8/dist/chart.umd.min.js"></script>
    
    <!-- 配置Tailwind颜色和字体 -->
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#3b82f6',
                        secondary: '#10b981',
                        accent: '#f59e0b',
                        danger: '#ef4444',
                        dark: '#1f2937',
                        light: '#f3f4f6',
                        // 夜间模式专用颜色
                        'dark-bg': '#0f172a',
                        'dark-surface': '#1e293b',
                        'dark-surface-hover': '#334155',
                        'dark-text': '#e2e8f0',
                        'dark-text-secondary': '#94a3b8',
                        'dark-border': '#334155',
                        'dark-primary': '#60a5fa',
                        'dark-secondary': '#34d399',
                        'dark-accent': '#fbbf24',
                        'dark-danger': '#f87171'
                    },
                    fontFamily: {
                        sans: ['Inter', 'system-ui', 'sans-serif'],
                    },
                }
            }
        }
    </script>
    
    <!-- 自定义工具类 -->
    <style type="text/tailwindcss">
        @layer utilities {
            .content-auto {
                content-visibility: auto;
            }
            .text-shadow {
                text-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            .card-hover {
                transition: all 0.3s ease;
            }
            .card-hover:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
            }
            .btn-primary {
                border: 2px solid #3b82f6;
            }
            .btn-primary:hover {
                border-color: #2563eb;
            }
            .btn-danger {
                border: 2px solid #ef4444;
            }
            .btn-danger:hover {
                border-color: #dc2626;
            }
            .dark-mode {
                background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
                color: #e2e8f0;
            }
            .dark-mode .glass-card {
                background: rgba(30, 41, 59, 0.7);
                backdrop-filter: blur(10px);
                border: 1px solid rgba(51, 65, 85, 0.3);
                box-shadow: 0 8px 32px rgba(2, 8, 20, 0.4);
            }
            .dark-mode .glass-card:hover {
                background: rgba(30, 41, 59, 0.8);
                border: 1px solid rgba(71, 85, 105, 0.5);
            }
            .dark-mode .nav-glass {
                background: rgba(15, 23, 42, 0.9);
                backdrop-filter: blur(10px);
                border-bottom: 1px solid rgba(51, 65, 85, 0.3);
            }
            .dark-mode .text-glow {
                text-shadow: 0 0 10px rgba(96, 165, 250, 0.5);
            }
            .dark-mode .progress-glow {
                box-shadow: 0 0 10px rgba(96, 165, 250, 0.3);
            }
            .dark-mode .chart-container {
                background: rgba(30, 41, 59, 0.5);
                border-radius: 12px;
                padding: 1rem;
            }
            .dark-mode .table-row:hover {
                background: rgba(51, 65, 85, 0.4);
            }
            .dark-mode .form-input {
                background: rgba(30, 41, 59, 0.7);
                border: 1px solid rgba(51, 65, 85, 0.5);
                color: #e2e8f0;
            }
            .dark-mode .form-input:focus {
                border-color: #60a5fa;
                box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1);
            }
            .dark-mode .form-input::placeholder {
                color: #64748b;
            }
            .dark-mode .btn-primary {
                background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
                box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
            }
            .dark-mode .btn-primary:hover {
                background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);
                box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
            }
            .dark-mode .btn-danger {
                background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
                box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3);
            }
            .dark-mode .btn-danger:hover {
                background: linear-gradient(135deg, #f87171 0%, #ef4444 100%);
                box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4);
            }
            .dark-mode .legend-item {
                background: rgba(30, 41, 59, 0.6);
                border: 1px solid rgba(51, 65, 85, 0.3);
            }
            .dark-mode .legend-item:hover {
                background: rgba(51, 65, 85, 0.6);
                border-color: rgba(71, 85, 105, 0.5);
            }
            .dark-mode .modal-backdrop {
                background: rgba(0, 0, 0, 0.7);
            }
            .dark-mode .modal-content {
                background: rgba(30, 41, 59, 0.95);
                border: 1px solid rgba(51, 65, 85, 0.5);
                box-shadow: 0 25px 50px rgba(2, 8, 20, 0.5);
            }
            .dark-mode .status-indicator {
                background: rgba(30, 41, 59, 0.7);
                border: 1px solid rgba(51, 65, 85, 0.3);
            }
            .dark-mode .status-indicator.active {
                background: rgba(16, 185, 129, 0.2);
                border-color: rgba(52, 211, 153, 0.5);
                box-shadow: 0 0 10px rgba(52, 211, 153, 0.3);
            }
            .dark-mode .status-indicator.error {
                background: rgba(239, 68, 68, 0.2);
                border-color: rgba(248, 113, 113, 0.5);
                box-shadow: 0 0 10px rgba(248, 113, 113, 0.3);
            }
            .dark-mode .breadcrumb {
                background: rgba(30, 41, 59, 0.6);
                border: 1px solid rgba(51, 65, 85, 0.3);
            }
            .dark-mode .breadcrumb-item:hover {
                background: rgba(51, 65, 85, 0.4);
            }
            .dark-mode .skeleton {
                background: linear-gradient(90deg, rgba(30, 41, 59, 0.5) 25%, rgba(51, 65, 85, 0.5) 50%, rgba(30, 41, 59, 0.5) 75%);
                background-size: 200% 100%;
                animation: skeleton-loading 1.5s infinite;
            }
            @keyframes skeleton-loading {
                0% { background-position: 200% 0; }
                100% { background-position: -200% 0; }
            }
            .dark-mode .pulse-animation {
                animation: pulse-glow 2s infinite;
            }
            @keyframes pulse-glow {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.7; box-shadow: 0 0 20px rgba(96, 165, 250, 0.4); }
            }
            /* 白天模式样式修复 */
            body:not(.dark-mode) {
                background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);
                color: #1f2937;
            }
            body:not(.dark-mode) .glass-card {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border: 1px solid rgba(226, 232, 240, 0.5);
            }
            body:not(.dark-mode) .glass-chart-container {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border: 1px solid rgba(226, 232, 240, 0.5);
            }
            /* 黑夜模式样式修复 */
            body.dark-mode .glass-card {
                background: rgba(30, 41, 59, 0.7);
                backdrop-filter: blur(10px);
                border: 1px solid rgba(51, 65, 85, 0.3);
                box-shadow: 0 8px 32px rgba(2, 8, 20, 0.4);
            }
            body.dark-mode .glass-chart-container {
                background: rgba(30, 41, 59, 0.7);
                backdrop-filter: blur(10px);
                border: 1px solid rgba(51, 65, 85, 0.3);
                box-shadow: 0 8px 32px rgba(2, 8, 20, 0.4);
            }
            /* 白天模式表单元素样式 */
            body:not(.dark-mode) select,
            body:not(.dark-mode) input[type="text"],
            body:not(.dark-mode) input[type="number"] {
                background-color: #ffffff;
                color: #1f2937;
                border: 1px solid #d1d5db;
            }
            body:not(.dark-mode) select:focus,
            body:not(.dark-mode) input:focus {
                border-color: #3b82f6;
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            }
            body:not(.dark-mode) select option {
                background-color: #ffffff;
                color: #1f2937;
            }
            body:not(.dark-mode) .text-gray-600 {
                color: #4b5563;
            }
            body:not(.dark-mode) .text-gray-700 {
                color: #374151;
            }
            body:not(.dark-mode) .text-gray-400 {
                color: #9ca3af;
            }
            body:not(.dark-mode) .text-gray-500 {
                color: #6b7280;
            }
            /* Canvas图表阴影效果 */
            .chart-container canvas {
                filter: drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1));
                transition: filter 0.3s ease;
            }
            .dark-mode .chart-container canvas {
                filter: drop-shadow(0 4px 6px rgba(0, 0, 0, 0.3));
            }
            .chart-container canvas:hover {
                filter: drop-shadow(0 6px 12px rgba(0, 0, 0, 0.15));
            }
            .dark-mode .chart-container canvas:hover {
                filter: drop-shadow(0 6px 12px rgba(0, 0, 0, 0.4));
            }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-light to-white min-h-screen font-sans text-dark transition-colors duration-300">
    <!-- 顶部导航栏 -->
    <header class="bg-white shadow-md sticky top-0 z-50 transition-all duration-300">
        <div class="container mx-auto px-4 py-3 flex items-center justify-between">
            <div class="flex items-center space-x-3">
                <i class="fa fa-hdd-o text-2xl text-primary transition-colors duration-300"></i>
                <h1 class="text-[clamp(1.25rem,3vw,1.75rem)] font-bold text-dark transition-colors duration-300 text-shadow">扫盘大王</h1>
            </div>
            <div class="hidden md:flex items-center space-x-6">
                <a href="#" class="text-dark hover:text-primary transition-colors duration-300">主页</a>
            </div>
            <button id="theme-toggle" class="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-dark-surface-hover transition-all duration-300 group">
                <i class="fa fa-moon-o text-dark group-hover:text-primary transition-colors duration-300"></i>
            </button>
        </div>
    </header>

    <!-- 主内容区 -->
    <main class="container mx-auto px-4 py-8">
        <!-- 扫描设置区域 -->
        <section class="mb-10 bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl card-hover glass-card">
            <div class="flex flex-col md:flex-row md:items-center justify-between mb-6">
                <h2 class="text-[clamp(1.1rem,2vw,1.5rem)] font-semibold text-dark mb-4 md:mb-0 text-shadow">扫描设置</h2>
                <div class="flex items-center space-x-2">
                    <i class="fa fa-info-circle text-primary transition-colors duration-300"></i>
                    <span class="text-sm text-gray-600 dark:text-dark-text-secondary transition-colors duration-300">选择目标硬盘进行扫描分析</span>
                </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <!-- 驱动器选择 -->
                <div class="col-span-1">
                    <label for="drive-select" class="block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-2 transition-colors duration-300">选择驱动器</label>
                    <div class="relative">
                        <select id="drive-select" class="block w-full pl-10 pr-12 py-3 bg-gray-50 dark:bg-dark-surface border border-gray-300 dark:border-dark-border rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary transition-all duration-300 form-input">
                            <option value="">正在加载驱动器...</option>
                        </select>
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <i class="fa fa-server text-gray-400 dark:text-dark-text-secondary transition-colors duration-300"></i>
                        </div>
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <i class="fa fa-chevron-down text-gray-400 dark:text-dark-text-secondary transition-colors duration-300"></i>
                        </div>
                    </div>
                </div>

                <!-- 文件夹路径输入 -->
                <div class="col-span-1">
                    <label for="folder-path" class="block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-2 transition-colors duration-300">或指定文件夹</label>
                    <div class="relative">
                        <input type="text" id="folder-path" placeholder="如: C:\Users\Documents" class="block w-full pl-10 pr-4 py-3 bg-gray-50 dark:bg-dark-surface border border-gray-300 dark:border-dark-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary transition-all duration-300 form-input">
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <i class="fa fa-folder text-gray-400 dark:text-dark-text-secondary transition-colors duration-300"></i>
                        </div>
                    </div>
                </div>
                
                <!-- 扫描深度 -->
                <div class="col-span-1">
                    <label for="scan-depth" class="block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-2 transition-colors duration-300">扫描深度</label>
                    <div class="relative">
                        <input type="number" id="scan-depth" class="block w-full pl-10 pr-12 py-3 bg-gray-50 dark:bg-dark-surface border border-gray-300 dark:border-dark-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary transition-all duration-300 form-input" min="1" max="50" value="10" placeholder="输入扫描深度">
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <i class="fa fa-search-plus text-gray-400 dark:text-dark-text-secondary transition-colors duration-300"></i>
                        </div>
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 text-xs text-gray-400 dark:text-dark-text-secondary transition-colors duration-300">
                            层
                        </div>
                    </div>
                    <p class="text-xs text-gray-500 dark:text-dark-text-secondary mt-1 transition-colors duration-300">数字越大扫描越深入，1=仅当前文件夹，10=深入10层子文件夹</p>
                </div>
                
                <!-- 扫描按钮组 -->
                <div class="col-span-1 flex items-end space-x-3">
                    <button id="scan-button" class="flex-1 bg-primary hover:bg-primary/90 text-white font-medium py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition-all flex items-center justify-center space-x-2 group btn-primary border-2 border-primary hover:border-primary/80">
                        <i class="fa fa-play-circle-o group-hover:scale-110 transition-transform duration-300"></i>
                        <span>开始扫描</span>
                    </button>
                    <button id="stop-button" class="bg-danger hover:bg-danger/90 text-white font-medium py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition-all flex items-center justify-center space-x-2 group btn-danger hidden border-2 border-danger hover:border-danger/80">
                        <i class="fa fa-stop-circle-o group-hover:scale-110 transition-transform duration-300"></i>
                        <span>停止扫描</span>
                    </button>
                </div>
            </div>
            
            <!-- 扫描进度 -->
            <div id="scan-progress-container" class="mt-6 hidden">
                <div class="flex justify-between items-center mb-2">
                    <span class="text-sm font-medium text-gray-700 dark:text-dark-text-secondary transition-colors duration-300" id="scan-status-text">准备扫描...</span>
                    <span class="text-sm font-medium text-primary dark:text-dark-primary transition-colors duration-300 text-glow" id="scan-percentage">0%</span>
                </div>
                <div class="w-full bg-gray-200 dark:bg-dark-border rounded-full h-2.5 transition-colors duration-300">
                    <div id="scan-progress-bar" class="bg-primary dark:bg-dark-primary h-2.5 rounded-full transition-all duration-300 progress-glow" style="width: 0%"></div>
                </div>
                <div class="flex justify-between text-xs text-gray-500 dark:text-dark-text-secondary mt-2 transition-colors duration-300">
                    <span id="scanned-files-info">已扫描: 0 个文件</span>
                    <span id="scanned-size-info">已扫描: 0 B</span>
                </div>
            </div>
        </section>
        
        <!-- 饼图展示区域 -->
        <section id="charts-section" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-6 mb-10">
            <!-- 程序占用空间饼图 -->
            <div class="bg-white rounded-xl shadow-lg p-6 card-hover opacity-50 glass-chart-container" id="apps-chart-card">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-dark dark:text-dark-text flex items-center transition-colors duration-300">
                        <i class="fa fa-pie-chart text-primary dark:text-dark-primary mr-2 transition-colors duration-300"></i>
                        程序占用空间
                    </h3>
                    <div class="text-xs text-gray-500 dark:text-dark-text-secondary transition-colors duration-300" id="apps-total-size">0 B</div>
                </div>
                <div class="relative h-64 chart-container">
                    <canvas id="apps-chart"></canvas>
                </div>
                <div class="mt-4 max-h-40 overflow-y-auto" id="apps-legend-container">
                    <div class="text-center text-gray-500 dark:text-dark-text-secondary text-sm transition-colors duration-300" id="apps-placeholder">扫描完成后显示数据</div>
                </div>
            </div>
            
            <!-- 文件类型分布饼图 -->
            <div class="bg-white rounded-xl shadow-lg p-6 card-hover opacity-50 glass-chart-container" id="types-chart-card">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-dark dark:text-dark-text flex items-center transition-colors duration-300">
                        <i class="fa fa-files-o text-secondary dark:text-dark-secondary mr-2 transition-colors duration-300"></i>
                        文件类型分布
                    </h3>
                    <div class="text-xs text-gray-500 dark:text-dark-text-secondary transition-colors duration-300" id="types-total-count">0 个文件</div>
                </div>
                <div class="relative h-64 chart-container">
                    <canvas id="types-chart"></canvas>
                </div>
                <div class="mt-4 max-h-40 overflow-y-auto" id="types-legend-container">
                    <div class="text-center text-gray-500 dark:text-dark-text-secondary text-sm transition-colors duration-300" id="types-placeholder">扫描完成后显示数据</div>
                </div>
            </div>
            
            <!-- 文件夹占用空间饼图 -->
            <div class="bg-white rounded-xl shadow-lg p-6 card-hover opacity-50 glass-chart-container" id="folders-chart-card">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-dark dark:text-dark-text flex items-center transition-colors duration-300">
                        <i class="fa fa-folder-open text-accent dark:text-dark-accent mr-2 transition-colors duration-300"></i>
                        文件夹占用空间
                    </h3>
                    <div class="text-xs text-gray-500 dark:text-dark-text-secondary transition-colors duration-300" id="folders-total-size">0 B</div>
                </div>
                <div class="relative h-64 chart-container">
                    <canvas id="folders-chart"></canvas>
                </div>
                <div class="mt-4 max-h-40 overflow-y-auto" id="folders-legend-container">
                    <div class="text-center text-gray-500 dark:text-dark-text-secondary text-sm transition-colors duration-300" id="folders-placeholder">扫描完成后显示数据</div>
                </div>
            </div>

            <!-- 代码语言分类饼图 -->
            <div class="bg-white rounded-xl shadow-lg p-6 card-hover opacity-50 glass-chart-container" id="code-lang-chart-card">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-dark dark:text-dark-text flex items-center transition-colors duration-300">
                        <i class="fa fa-code text-purple-500 dark:text-purple-400 mr-2 transition-colors duration-300"></i>
                        编程语言分布
                    </h3>
                    <div class="text-xs text-gray-500 dark:text-dark-text-secondary transition-colors duration-300" id="code-lang-total-size">0 B</div>
                </div>
                <div class="relative h-64 chart-container">
                    <canvas id="code-lang-chart"></canvas>
                </div>
                <div class="mt-4 max-h-40 overflow-y-auto" id="code-lang-legend-container">
                    <div class="text-center text-gray-500 dark:text-dark-text-secondary text-sm transition-colors duration-300" id="code-lang-placeholder">扫描完成后显示数据</div>
                </div>
            </div>
        </section>
        
        <!-- 详细信息表格 -->
        <section id="details-section" class="bg-white rounded-xl shadow-lg p-6 mb-10 opacity-50">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
                <h2 class="text-[clamp(1.1rem,2vw,1.5rem)] font-semibold text-dark flex items-center">
                    <i class="fa fa-table text-primary mr-2"></i>
                    详细数据视图
                </h2>
                
                <div class="flex flex-wrap gap-4 mt-4 md:mt-0">
                    <!-- 数据类型选择 -->
                    <div class="relative">
                        <select id="data-view-select" class="pl-10 pr-12 py-2 border border-gray-300 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary transition-all">
                            <option value="fileTypes">文件类型</option>
                            <option value="folders">文件夹</option>
                            <option value="applications">应用程序</option>
                        </select>
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <i class="fa fa-filter text-gray-400"></i>
                        </div>
                    </div>
                    
                    <!-- 搜索框 -->
                    <div class="relative">
                        <input type="text" id="search-data" placeholder="搜索..." class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary">
                        <i class="fa fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    </div>
                    
                    <!-- 排序选项 -->
                    <select id="sort-option" class="pl-4 pr-8 py-2 border border-gray-300 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary bg-white">
                        <option value="size-desc">按大小排序（大→小）</option>
                        <option value="size-asc">按大小排序（小→大）</option>
                        <option value="name-asc">按名称排序（A→Z）</option>
                        <option value="name-desc">按名称排序（Z→A）</option>
                    </select>
                </div>
            </div>
            
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr id="table-header">
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">名称</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">大小</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">占比</th>
                            <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">文件数</th>
                        </tr>
                    </thead>
                    <tbody id="data-table-body" class="bg-white divide-y divide-gray-200">
                        <tr>
                            <td colspan="4" class="px-6 py-10 text-center text-gray-500">
                                <i class="fa fa-hdd-o text-4xl mb-3 block opacity-30"></i>
                                <p>扫描完成后显示数据</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <!-- 分页控制 -->
            <div class="flex justify-between items-center mt-6" id="pagination-controls">
                <div class="text-sm text-gray-600">显示 <span id="start-item">0</span>-<span id="end-item">0</span> 项，共 <span id="total-items">0</span> 项</div>
                <div class="flex space-x-2">
                    <button id="prev-page" class="px-3 py-1 border border-gray-300 rounded-md text-sm bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                        <i class="fa fa-chevron-left"></i>
                    </button>
                    <button id="next-page" class="px-3 py-1 border border-gray-300 rounded-md text-sm bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                        <i class="fa fa-chevron-right"></i>
                    </button>
                </div>
            </div>
        </section>
    </main>

    <!-- 页脚 -->
    <footer class="bg-dark text-white py-8">
        <div class="container mx-auto px-4">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="mb-4 md:mb-0">
                    <div class="flex items-center space-x-2">
                        <i class="fa fa-hdd-o text-primary"></i>
                        <span class="font-semibold">扫盘大王</span>
                    </div>
                    <p class="text-sm text-gray-400 mt-1">高效分析硬盘空间使用情况</p>
                </div>
                <div class="flex space-x-6">
                    <a href="#" class="text-gray-400 hover:text-white transition-colors">
                        <i class="fa fa-question-circle-o"></i>
                        <span class="ml-1">帮助</span>
                    </a>
                    <a href="#" class="text-gray-400 hover:text-white transition-colors">
                        <i class="fa fa-github"></i>
                        <span class="ml-1">GitHub</span>
                    </a>
                    <a href="#" class="text-gray-400 hover:text-white transition-colors">
                        <i class="fa fa-envelope-o"></i>
                        <span class="ml-1">联系我们</span>
                    </a>
                </div>
            </div>
            <div class="border-t border-gray-800 mt-6 pt-6 text-center text-sm text-gray-500">
                &copy; 2025 扫盘大王 | 所有权利保留
            </div>
        </div>
    </footer>

    <!-- 脚本部分 -->
    <script>
        // 全局变量
        let ws = null;
        let currentTaskId = null;
        let scanResults = null;
        let currentPage = 1;
        const itemsPerPage = 20;
        let appsChart = null;
        let typesChart = null;
        let foldersChart = null;
        let codeLangChart = null;
        let currentViewType = 'fileTypes';
        
        // DOM 元素引用
        const driveSelect = document.getElementById('drive-select');
        const scanButton = document.getElementById('scan-button');
        const stopButton = document.getElementById('stop-button');
        const scanProgressContainer = document.getElementById('scan-progress-container');
        const scanProgressBar = document.getElementById('scan-progress-bar');
        const scanStatusText = document.getElementById('scan-status-text');
        const scanPercentage = document.getElementById('scan-percentage');
        const scannedFilesInfo = document.getElementById('scanned-files-info');
        const scannedSizeInfo = document.getElementById('scanned-size-info');
        const dataViewSelect = document.getElementById('data-view-select');
        const searchData = document.getElementById('search-data');
        const sortOption = document.getElementById('sort-option');
        const prevPageBtn = document.getElementById('prev-page');
        const nextPageBtn = document.getElementById('next-page');
        const startItem = document.getElementById('start-item');
        const endItem = document.getElementById('end-item');
        const totalItems = document.getElementById('total-items');
        const themeToggle = document.getElementById('theme-toggle');
        const dataTableBody = document.getElementById('data-table-body');
        
        // 初始化函数
        function init() {
            console.log('开始初始化应用...');
            
            // 加载保存的主题偏好
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                document.body.classList.add('dark-mode');
                document.body.classList.remove('bg-gradient-to-br', 'from-light', 'to-white');
                document.querySelector('header').classList.add('nav-glass');
                document.querySelectorAll('#apps-chart-card, #types-chart-card, #folders-chart-card').forEach(el => {
                    el.classList.add('glass-card');
                });
                document.querySelectorAll('#scan-button').forEach(el => {
                    el.classList.add('btn-primary');
                });
                document.querySelectorAll('#stop-button').forEach(el => {
                    el.classList.add('btn-danger');
                });
                document.querySelector('#scan-progress-bar').classList.add('progress-glow');
                document.querySelector('#scan-percentage').classList.add('text-glow');
                themeToggle.innerHTML = '<i class="fa fa-sun-o text-yellow-400 text-xl pulse-animation"></i>';
            }
            
            // 设置默认扫描深度为10
                const scanDepthInput = document.getElementById('scan-depth');
                if (scanDepthInput && (scanDepthInput.value === '' || scanDepthInput.value === '2')) {
                    scanDepthInput.value = '10';
                }
            
            // 添加扫描统计信息元素
            if (!document.getElementById('scan-stats-info')) {
                const statsContainer = document.createElement('div');
                statsContainer.id = 'scan-stats-info';
                statsContainer.className = 'mt-4 p-4 bg-info/10 rounded-lg text-sm hidden';
                statsContainer.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 1000; background: rgba(240, 249, 255, 0.9); border: 1px solid #3b82f6;';
                document.body.appendChild(statsContainer);
            }
            
            // 加载系统驱动器
            loadDrives().catch(error => {
                console.error('加载驱动器失败:', error);
                // 添加模拟驱动器以便测试
                driveSelect.innerHTML = '';
                const defaultOption = document.createElement('option');
                defaultOption.value = 'C:';
                defaultOption.textContent = 'C: 本地磁盘 (模拟)';
                driveSelect.appendChild(defaultOption);
                alert('无法加载真实驱动器列表，已添加模拟C盘用于测试');
            });
            
            // 初始化WebSocket连接
            initWebSocket();
            
            // 初始化图表
            try {
                initCharts();
                console.log('图表初始化完成');
            } catch (error) {
                console.error('图表初始化失败:', error);
            }
            
            // 绑定事件监听器
            scanButton.addEventListener('click', startScan);
            stopButton.addEventListener('click', stopScan);
            dataViewSelect.addEventListener('change', changeDataView);
            searchData.addEventListener('input', filterAndSortData);
            sortOption.addEventListener('change', filterAndSortData);
            prevPageBtn.addEventListener('click', goToPrevPage);
            nextPageBtn.addEventListener('click', goToNextPage);
            themeToggle.addEventListener('click', toggleTheme);
            
            // 添加文件夹路径输入框的智能交互
            const folderPathInput = document.getElementById('folder-path');
            folderPathInput.addEventListener('input', function() {
                if (this.value.trim()) {
                    // 如果输入了文件夹路径，清空驱动器选择
                    driveSelect.value = '';
                }
            });
            
            // 添加驱动器选择框的智能交互
            driveSelect.addEventListener('change', function() {
                if (this.value) {
                    // 如果选择了驱动器，清空文件夹路径输入
                    folderPathInput.value = '';
                }
            });
            
            console.log('初始化完成');
        }
        
        // 加载系统驱动器
        async function loadDrives() {
            try {
                const response = await fetch('/api/drives');
                if (!response.ok) {
                    throw new Error('获取驱动器列表失败');
                }
                const drives = await response.json();
                
                // 清空并填充驱动器选择框
                driveSelect.innerHTML = '';
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = '请选择一个驱动器...';
                driveSelect.appendChild(defaultOption);
                
                drives.forEach(drive => {
                    const option = document.createElement('option');
                    option.value = drive.name;
                    option.textContent = `${drive.name} 本地磁盘`;
                    driveSelect.appendChild(option);
                });
                
                // 添加自定义路径选项
                const customOption = document.createElement('option');
                customOption.value = 'custom';
                customOption.textContent = '📁 自定义文件夹路径';
                driveSelect.appendChild(customOption);
            } catch (error) {
                console.error('加载驱动器失败:', error);
                driveSelect.innerHTML = '';
                const errorOption = document.createElement('option');
                errorOption.value = '';
                errorOption.textContent = '无法加载驱动器列表';
                driveSelect.appendChild(errorOption);
                alert('无法加载驱动器列表: ' + error.message);
            }
        }
        
        // 初始化WebSocket连接
        function initWebSocket() {
            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${wsProtocol}//${window.location.host}`;
            
            console.log('正在连接WebSocket:', wsUrl);
            
            // 重置之前的连接
            if (ws) {
                ws.close();
            }
            
            ws = new WebSocket(wsUrl);
            ws.binaryType = 'blob';
            
            ws.onopen = () => {
                console.log('WebSocket连接已建立');
                // 显示连接成功提示
                const statusText = document.getElementById('scan-status-text');
                if (statusText && !scanProgressContainer.classList.contains('hidden')) {
                    statusText.textContent = 'WebSocket连接已建立';
                }
            };
            
            ws.onmessage = (event) => {
                try {
                    console.log('接收到WebSocket消息:', event.data);
                    const data = JSON.parse(event.data);
                    handleWebSocketMessage(data);
                } catch (error) {
                    console.error('解析WebSocket消息失败:', error);
                    console.error('原始消息:', event.data);
                }
            };
            
            ws.onclose = (event) => {
                console.log('WebSocket连接已关闭', event.code, event.reason);
                // 显示连接关闭提示
                const statusText = document.getElementById('scan-status-text');
                if (statusText && !scanProgressContainer.classList.contains('hidden')) {
                    statusText.textContent = 'WebSocket连接已断开';
                }
                // 尝试重新连接
                setTimeout(() => {
                    console.log('尝试重新连接WebSocket...');
                    initWebSocket();
                }, 5000);
            };
            
            ws.onerror = (error) => {
                console.error('WebSocket错误:', error);
                // 显示错误提示
                const statusText = document.getElementById('scan-status-text');
                if (statusText && !scanProgressContainer.classList.contains('hidden')) {
                    statusText.textContent = 'WebSocket连接错误';
                }
            };
        }
        
        // 处理WebSocket消息
        function handleWebSocketMessage(data) {
            console.log('处理WebSocket消息:', JSON.stringify(data));
            
            // 处理可能的字符串消息
            if (typeof data === 'string') {
                try {
                    data = JSON.parse(data);
                } catch (e) {
                    console.error('无法解析消息:', data);
                    return;
                }
            }
            
            // 验证消息格式
            if (!data || typeof data.type !== 'string') {
                console.error('无效的消息格式:', data);
                return;
            }
            
            switch (data.type) {
                case 'scan_started':
                    console.log('扫描开始:', data.payload);
                    if (data.payload && data.payload.taskId) {
                        currentTaskId = data.payload.taskId;
                        updateUIForScanStart();
                    } else {
                        console.error('无效的扫描开始消息，缺少taskId');
                        currentTaskId = 'default-task'; // 设置默认任务ID
                        updateUIForScanStart();
                    }
                    break;
                case 'scan_progress':
                    console.log('扫描进度:', data.payload);
                    if (data.payload) {
                        updateScanProgress(data.payload);
                    } else {
                        console.error('无效的扫描进度消息');
                    }
                    break;
                case 'scan_complete':
                    console.log('扫描完成，原始结果:', JSON.stringify(data.payload));
                    if (data.payload) {
                        // 兼容可能的直接返回格式
                        scanResults = data.payload.stats || data.payload;
                        console.log('处理后的扫描结果:', scanResults);
                        updateUIForScanComplete();
                    } else {
                        console.error('无效的扫描完成消息');
                        // 显示错误并重置UI
                        updateUIForScanError('扫描完成但未返回数据');
                    }
                    break;
                case 'scan_stopped':
                    updateUIForScanStopped();
                    break;
                case 'scan_error':
                    const errorMessage = data.payload && data.payload.error ? data.payload.error : '未知错误';
                    updateUIForScanError(errorMessage);
                    break;
                default:
                    console.log('未知消息类型:', data.type);
            }
        }
        
        // 初始化图表
        function initCharts() {
            const appsCtx = document.getElementById('apps-chart').getContext('2d');
            const typesCtx = document.getElementById('types-chart').getContext('2d');
            const foldersCtx = document.getElementById('folders-chart').getContext('2d');
            const codeLangCtx = document.getElementById('code-lang-chart').getContext('2d');
            
            // 图表通用配置
            const chartConfig = {
                type: 'doughnut',
                data: {
                    labels: ['准备扫描'],
                    datasets: [{
                        data: [1],
                        backgroundColor: ['#3b82f6'],
                        borderWidth: 0,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            padding: 12,
                            bodyFont: {
                                size: 12
                            },
                            callbacks: {
                                label: function(context) {
                                    return '请选择驱动器并开始扫描';
                                }
                            }
                        }
                    }
                }
            };
            
            try {
                // 创建图表实例
                appsChart = new Chart(appsCtx, { ...chartConfig });
                typesChart = new Chart(typesCtx, { ...chartConfig });
                foldersChart = new Chart(foldersCtx, { ...chartConfig });
                codeLangChart = new Chart(codeLangCtx, { ...chartConfig });
                console.log('图表初始化成功');
            } catch (error) {
                console.error('图表初始化失败:', error);
            }
        }
        
        // 开始扫描
        function startScan() {
            const drive = driveSelect.value;
            const folderPath = document.getElementById('folder-path').value;
            let scanDepth = parseInt(document.getElementById('scan-depth').value);
            
            // 验证输入：必须选择驱动器或输入文件夹路径
            if (!drive && !folderPath) {
                alert('请选择一个驱动器或输入文件夹路径');
                return;
            }
            
            // 如果输入了文件夹路径，优先使用文件夹路径
            if (folderPath) {
                // 验证文件夹路径格式
                if (!folderPath.match(/^[a-zA-Z]:[\\\/].*/)) {
                    alert('文件夹路径格式不正确，请输入如: C:\\Users\\Documents');
                    return;
                }
            }
            
            // 设置更合理的默认扫描深度
                if (isNaN(scanDepth) || scanDepth < 1) {
                    scanDepth = 10;
                    document.getElementById('scan-depth').value = scanDepth;
                    console.log('使用默认扫描深度:', scanDepth);
                }
            
            // 检查WebSocket连接状态
            if (!ws || ws.readyState !== WebSocket.OPEN) {
                console.error('WebSocket连接未建立:', ws ? ws.readyState : '未初始化');
                // 尝试重新连接
                initWebSocket();
                setTimeout(() => {
                    if (ws && ws.readyState === WebSocket.OPEN) {
                        console.log('连接建立后重试扫描');
                        doStartScan(drive, scanDepth);
                    } else {
                        alert('WebSocket连接失败，请刷新页面重试');
                    }
                }, 2000);
                return;
            }
            
            doStartScan(drive, scanDepth);
        }
        
        function doStartScan(drive, scanDepth) {
            const folderPath = document.getElementById('folder-path').value;
            console.log('开始扫描 - 驱动器:', drive, '文件夹路径:', folderPath, '深度:', scanDepth);
            
            // 清空之前的扫描结果
            scanResults = null;
            
            // 根据用户选择确定扫描路径
            let scanPath;
            if (folderPath) {
                // 使用用户输入的文件夹路径
                scanPath = folderPath;
            } else if (drive === 'custom') {
                // 自定义路径模式 - 使用文件夹选择器（向后兼容）
                const customPath = prompt('请输入要扫描的文件夹路径:');
                if (!customPath) {
                    alert('未输入路径，取消扫描');
                    return;
                }
                scanPath = customPath;
            } else {
                // 驱动器模式 - 确保是完整路径格式
                if (drive.length === 2 && drive.endsWith(':')) {
                    // 如果是C:这样的格式，转换为C:\
                    scanPath = drive + '\\';
                } else {
                    scanPath = drive;
                }
            }
            
            console.log('扫描路径:', scanPath);
            
            // 发送扫描请求
            const scanRequest = {
                type: 'start_scan',
                payload: {
                    drivePath: scanPath,
                    scanDepth
                }
            };
            
            console.log('发送扫描请求:', scanRequest);
            try {
                ws.send(JSON.stringify(scanRequest));
            } catch (error) {
                console.error('发送扫描请求失败:', error);
                alert('发送扫描请求失败: ' + error.message);
            }
        }
        
        // 停止扫描
        function stopScan() {
            if (!currentTaskId || ws.readyState !== WebSocket.OPEN) {
                return;
            }
            
            ws.send(JSON.stringify({
                type: 'stop_scan',
                payload: {
                    taskId: currentTaskId
                }
            }));
        }
        
        // 更新扫描开始时的UI
        function updateUIForScanStart() {
            // 重置进度条
            scanProgressBar.style.width = '0%';
            scanStatusText.textContent = '开始扫描...';
            scanPercentage.textContent = '0%';
            scannedFilesInfo.textContent = '已扫描: 0 个文件';
            scannedSizeInfo.textContent = '已扫描: 0 B';
            
            // 显示进度条，隐藏图表
            scanProgressContainer.classList.remove('hidden');
            
            // 切换按钮状态
            scanButton.classList.add('hidden');
            stopButton.classList.remove('hidden');
            
            // 禁用驱动器选择
            driveSelect.disabled = true;
            
            // 禁用图表和详情区域
            const cards = document.querySelectorAll('#apps-chart-card, #types-chart-card, #folders-chart-card, #code-lang-chart-card, #details-section');
            cards.forEach(card => {
                card.classList.add('opacity-50');
            });
        }
        
        // 更新扫描进度
        function updateScanProgress(progress) {
            const { scannedCount, totalSize, errorCount } = progress;
            
            // 估算进度百分比（由于不知道总文件数，这里只是一个参考值）
            // 在实际应用中，后端可以提供更准确的进度信息
            const estimatedPercent = Math.min(95, Math.floor(scannedCount / 100));
            
            scanProgressBar.style.width = estimatedPercent + '%';
            scanPercentage.textContent = estimatedPercent + '%';
            scannedFilesInfo.textContent = `已扫描: ${scannedCount.toLocaleString()} 个文件`;
            scannedSizeInfo.textContent = `已扫描: ${formatBytes(totalSize)}`;
            
            if (errorCount > 0) {
                scanStatusText.textContent = `扫描中... (${errorCount} 个文件访问失败)`;
            } else {
                scanStatusText.textContent = '扫描中...';
            }
        }
        
        // 更新扫描完成时的UI
        function updateUIForScanComplete() {
            console.log('扫描完成，处理结果:', JSON.stringify(scanResults));
            
            // 更新UI状态
            scanProgressBar.style.width = '100%';
            scanPercentage.textContent = '100%';
            scanStatusText.textContent = '扫描完成';
            
            // 切换按钮状态
            scanButton.classList.remove('hidden');
            stopButton.classList.add('hidden');
            
            // 启用驱动器选择
            driveSelect.disabled = false;
            
            // 验证扫描结果数据
            if (!scanResults) {
                console.error('扫描结果为空');
                alert('扫描结果为空，请尝试重新扫描');
                return;
            }
            
            // 标准化扫描结果格式
            normalizeScanResults();
            
            console.log('标准化后扫描结果:', {
                fileTypesCount: scanResults.fileTypes.length,
                foldersCount: scanResults.folders.length,
                applicationsCount: scanResults.applications.length,
                totalFiles: scanResults.totalFiles,
                totalSize: scanResults.totalSize
            });
            
            // 更新图表和数据表格
            updateCharts();
            updateDataTable();
            
            // 显示详细的扫描统计信息
            showScanStatistics();
            
            // 启用图表和详情区域
            const cards = document.querySelectorAll('#apps-chart-card, #types-chart-card, #folders-chart-card, #code-lang-chart-card, #details-section');
            cards.forEach(card => {
                card.classList.remove('opacity-50');
            });
            
            // 显示扫描统计信息
            alert(`扫描完成！\n发现文件数: ${scanResults.totalFiles || 0}\n总大小: ${formatBytes(scanResults.totalSize || 0)}\n错误数: ${scanResults.errorCount || 0}`);
            
            // 重置当前任务ID
            currentTaskId = null;
        }
        
        // 更新扫描停止时的UI
        function updateUIForScanStopped() {
            scanStatusText.textContent = '扫描已停止';
            
            // 切换按钮状态
            scanButton.classList.remove('hidden');
            stopButton.classList.add('hidden');
            
            // 启用驱动器选择
            driveSelect.disabled = false;
            
            // 重置当前任务ID
            currentTaskId = null;
        }
        
        // 更新扫描错误时的UI
        function updateUIForScanError(error) {
            scanStatusText.textContent = `扫描出错: ${error}`;
            
            // 切换按钮状态
            scanButton.classList.remove('hidden');
            stopButton.classList.add('hidden');
            
            // 启用驱动器选择
            driveSelect.disabled = false;
            
            // 重置当前任务ID
            currentTaskId = null;
            
            alert('扫描过程中发生错误: ' + error);
        }
        
        // 标准化扫描结果格式
        function normalizeScanResults() {
            // 确保必要的数组存在
            if (!scanResults.fileTypes || !Array.isArray(scanResults.fileTypes)) {
                scanResults.fileTypes = [];
            }
            if (!scanResults.folders || !Array.isArray(scanResults.folders)) {
                scanResults.folders = [];
            }
            if (!scanResults.applications || !Array.isArray(scanResults.applications)) {
                scanResults.applications = [];
            }
            
            // 确保统计数据存在
            if (typeof scanResults.totalFiles !== 'number') {
                scanResults.totalFiles = 0;
            }
            if (typeof scanResults.totalSize !== 'number') {
                scanResults.totalSize = 0;
            }
            if (typeof scanResults.errorCount !== 'number') {
                scanResults.errorCount = 0;
            }
            
            // 转换对象格式的数据为数组格式
            if (scanResults.fileTypes && typeof scanResults.fileTypes === 'object' && !Array.isArray(scanResults.fileTypes)) {
                scanResults.fileTypes = Object.entries(scanResults.fileTypes)
                    .map(([key, value]) => ({
                        name: key,
                        size: value.size || value,
                        count: value.count || 0
                    }))
                    .filter(item => item.size > 0)
                    .sort((a, b) => b.size - a.size);
            }
            
            // 确保每个项目都有必要的属性 - 修复文件类型显示
            scanResults.fileTypes = scanResults.fileTypes.map(item => {
                console.log('处理文件类型项:', item);
                return {
                    name: item.name || item.type || '未知类型',  // 优先使用name字段
                    size: item.size || 0,
                    count: item.count || 0,
                    extension: item.extension || item.type || '',
                    description: item.description || ''
                };
            });
            
            scanResults.folders = scanResults.folders.map(item => ({
                name: item.name || '未知文件夹',
                size: item.size || 0
            }));
            
            scanResults.applications = scanResults.applications.map(item => ({
                name: item.name || '未知应用',
                size: item.size || 0
            }));
            
            // 按大小排序
            scanResults.fileTypes.sort((a, b) => b.size - a.size);
            scanResults.folders.sort((a, b) => b.size - a.size);
            scanResults.applications.sort((a, b) => b.size - a.size);
            
            // 过滤掉大小为0的项
            scanResults.fileTypes = scanResults.fileTypes.filter(item => item.size > 0);
            scanResults.folders = scanResults.folders.filter(item => item.size > 0);
            scanResults.applications = scanResults.applications.filter(item => item.size > 0);
            
            // 生成编程语言分布数据
            generateCodeLanguageData();
        }
        
        // 生成编程语言分布数据
        function generateCodeLanguageData() {
            const codeLanguages = {
                'JavaScript': { extensions: ['.js', '.jsx', '.mjs'], size: 0, count: 0 },
                'TypeScript': { extensions: ['.ts', '.tsx'], size: 0, count: 0 },
                'HTML': { extensions: ['.html', '.htm', '.xhtml'], size: 0, count: 0 },
                'CSS': { extensions: ['.css', '.scss', '.sass', '.less'], size: 0, count: 0 },
                'Python': { extensions: ['.py', '.pyw', '.pyx'], size: 0, count: 0 },
                'Java': { extensions: ['.java'], size: 0, count: 0 },
                'C/C++': { extensions: ['.c', '.cpp', '.cc', '.cxx', '.h', '.hpp'], size: 0, count: 0 },
                'C#': { extensions: ['.cs'], size: 0, count: 0 },
                'PHP': { extensions: ['.php', '.php3', '.php4', '.php5'], size: 0, count: 0 },
                'Ruby': { extensions: ['.rb'], size: 0, count: 0 },
                'Go': { extensions: ['.go'], size: 0, count: 0 },
                'Rust': { extensions: ['.rs'], size: 0, count: 0 },
                'Swift': { extensions: ['.swift'], size: 0, count: 0 },
                'Kotlin': { extensions: ['.kt', '.kts'], size: 0, count: 0 },
                'SQL': { extensions: ['.sql'], size: 0, count: 0 },
                'Shell': { extensions: ['.sh', '.bash', '.zsh'], size: 0, count: 0 },
                'XML': { extensions: ['.xml', '.xsl', '.xslt'], size: 0, count: 0 },
                'JSON': { extensions: ['.json'], size: 0, count: 0 },
                'Markdown': { extensions: ['.md', '.markdown'], size: 0, count: 0 },
                '其他': { extensions: [], size: 0, count: 0 }
            };
            
            // 统计代码文件
            scanResults.fileTypes.forEach(fileType => {
                const extension = fileType.extension || fileType.name || '';
                let found = false;
                
                // 检查是否匹配已知编程语言
                for (const [language, config] of Object.entries(codeLanguages)) {
                    if (language !== '其他' && config.extensions.includes(extension.toLowerCase())) {
                        config.size += fileType.size;
                        config.count += fileType.count;
                        found = true;
                        break;
                    }
                }
                
                // 未匹配的文件归类到"其他"
                if (!found && extension) {
                    codeLanguages['其他'].size += fileType.size;
                    codeLanguages['其他'].count += fileType.count;
                }
            });
            
            // 转换为数组格式并按大小排序
            scanResults.codeLanguages = Object.entries(codeLanguages)
                .filter(([_, data]) => data.size > 0)
                .map(([name, data]) => ({
                    name: name,
                    size: data.size,
                    count: data.count
                }))
                .sort((a, b) => b.size - a.size);
        }
        
        // 显示扫描统计信息
        function showScanStatistics() {
            const stats = [
                `文件总数: ${scanResults.totalFiles.toLocaleString()}`,
                `总大小: ${formatBytes(scanResults.totalSize)}`,
                `错误数: ${scanResults.errorCount}`,
                `文件类型: ${scanResults.fileTypes.length} 种`,
                `文件夹: ${scanResults.folders.length} 个`,
                `应用程序: ${scanResults.applications.length} 个`
            ];
            
            console.log('扫描统计:', stats.join('; '));
            
            // 显示统计信息，避免频繁弹窗
            const statsElement = document.getElementById('scan-stats-info');
            if (statsElement) {
                statsElement.innerHTML = stats.join('<br>');
                statsElement.classList.remove('hidden');
            } else {
                // 如果没有统计元素，使用alert
                alert('扫描完成！\n' + stats.join('\n'));
            }
        }
        
        // 更新图表
        function updateCharts() {
            if (!scanResults) return;
            
            console.log('更新图表数据');
            
            // 1. 程序占用空间饼图数据
            const applicationsData = scanResults.applications || [];
            console.log('应用程序数据数量:', applicationsData.length);
            updateChart(appsChart, applicationsData, 'apps', scanResults.totalSize || 0);
            document.getElementById('apps-total-size').textContent = formatBytes(scanResults.totalSize || 0);
            
            // 2. 文件类型分布饼图数据
            const fileTypesData = scanResults.fileTypes || [];
            console.log('文件类型数据数量:', fileTypesData.length);
            updateChart(typesChart, fileTypesData, 'types', scanResults.totalSize || 0);
            document.getElementById('types-total-count').textContent = (scanResults.totalFiles || 0).toLocaleString() + ' 个文件';
            
            // 3. 文件夹占用空间饼图数据
            const foldersData = scanResults.folders || [];
            console.log('文件夹数据数量:', foldersData.length);
            updateChart(foldersChart, foldersData, 'folders', scanResults.totalSize || 0);
            document.getElementById('folders-total-size').textContent = formatBytes(scanResults.totalSize || 0);
            
            // 4. 编程语言分布饼图数据
            const codeLangData = scanResults.codeLanguages || [];
            console.log('编程语言数据数量:', codeLangData.length);
            updateChart(codeLangChart, codeLangData, 'code-lang', scanResults.totalSize || 0);
            const codeLangTotalSize = codeLangData.reduce((sum, item) => sum + item.size, 0);
            document.getElementById('code-lang-total-size').textContent = formatBytes(codeLangTotalSize);
            
            // 更新图例
            updateLegend('apps-legend-container', applicationsData, 'size', scanResults.totalSize || 0);
            updateLegend('types-legend-container', fileTypesData, 'size', scanResults.totalSize || 0);
            updateLegend('folders-legend-container', foldersData, 'size', scanResults.totalSize || 0);
            updateLegend('code-lang-legend-container', codeLangData, 'size', codeLangTotalSize);
        }
        
        // 更新单个图表
        function updateChart(chart, data, type, totalSize) {
            // 处理空数据情况
            if (!data || data.length === 0) {
                chart.data.labels = ['暂无数据'];
                chart.data.datasets[0].data = [1];
                chart.data.datasets[0].backgroundColor = ['#e5e7eb'];
                chart.update();
                return;
            }
            
            // 生成颜色
            const colors = generateColors(Math.min(data.length, 10)); // 限制颜色数量
            
            // 处理大量数据的情况，只显示前N个，其余合并为"其他"
            const maxItems = 8;
            let itemsToDisplay = data;
            let otherValue = 0;
            
            if (data.length > maxItems) {
                itemsToDisplay = data.slice(0, maxItems);
                otherValue = data.slice(maxItems).reduce((sum, item) => sum + item.size, 0);
            }
            
            // 准备图表数据
            const labels = itemsToDisplay.map(item => item.name);
            const values = itemsToDisplay.map(item => item.size);
            
            // 如果有"其他"类别，添加到数据中
            if (otherValue > 0) {
                labels.push('其他');
                values.push(otherValue);
            }
            
            // 更新图表数据
            chart.data.labels = labels;
            chart.data.datasets[0].data = values;
            chart.data.datasets[0].backgroundColor = generateColors(labels.length);
            
            // 更新tooltip根据图表类型显示不同格式
            chart.options.plugins.tooltip.callbacks.label = function(context) {
                let label = context.label || '';
                let value = context.raw || 0;
                let percentage = totalSize > 0 ? Math.round((value / totalSize) * 100) : 0;
                
                if (label) {
                    label += ': ';
                }
                
                return label + formatBytes(value) + ' (' + percentage + '%)';
            };
            
            chart.update();
        }
        
        // 生成颜色数组
        function generateColors(count) {
            const baseColors = [
                '#3b82f6', '#10b981', '#f59e0b', '#ef4444',
                '#8b5cf6', '#ec4899', '#14b8a6', '#f97316',
                '#84cc16', '#6366f1'
            ];
            
            const colors = [];
            for (let i = 0; i < count; i++) {
                colors.push(baseColors[i % baseColors.length]);
            }
            return colors;
        }
        
        // 更新图例
        function updateLegend(containerId, items, valueType, totalValue) {
            const container = document.getElementById(containerId);
            container.innerHTML = '';
            
            if (!items || items.length === 0) {
                container.innerHTML = '<div class="text-center text-gray-500 text-sm">无数据</div>';
                return;
            }
            
            const colors = generateColors(Math.min(items.length, 10));
            
            // 限制显示的项数
            const maxItems = 10;
            const itemsToDisplay = items.slice(0, maxItems);
            
            itemsToDisplay.forEach((item, index) => {
                const legendItem = document.createElement('div');
                legendItem.className = 'flex items-center justify-between py-1 text-sm';
                
                const labelContainer = document.createElement('div');
                labelContainer.className = 'flex items-center';
                
                const colorDot = document.createElement('span');
                colorDot.className = 'w-3 h-3 rounded-full mr-2';
                colorDot.style.backgroundColor = colors[index];
                
                const label = document.createElement('span');
                label.textContent = item.name;
                label.title = item.name; // 添加悬停提示
                
                const valueContainer = document.createElement('div');
                valueContainer.className = 'text-right';
                
                const value = document.createElement('span');
                value.className = 'font-medium';
                value.textContent = formatBytes(item.size);
                
                const percentage = document.createElement('span');
                percentage.className = 'text-xs text-gray-500 block';
                percentage.textContent = totalValue > 0 ? 
                    `(${Math.round((item.size / totalValue) * 100)}%)` : 
                    '(0%)';
                
                valueContainer.appendChild(value);
                valueContainer.appendChild(percentage);
                labelContainer.appendChild(colorDot);
                labelContainer.appendChild(label);
                legendItem.appendChild(labelContainer);
                legendItem.appendChild(valueContainer);
                
                container.appendChild(legendItem);
            });
            
            // 如果有更多项，添加"显示更多"提示
            if (items.length > maxItems) {
                const moreItem = document.createElement('div');
                moreItem.className = 'text-center text-xs text-gray-500 mt-2 italic';
                moreItem.textContent = `还有 ${items.length - maxItems} 项未显示`;
                container.appendChild(moreItem);
            }
        }
        
        // 更改数据视图类型
        function changeDataView() {
            currentViewType = dataViewSelect.value;
            currentPage = 1; // 重置到第一页
            filterAndSortData();
        }
        
        // 过滤和排序数据
        function filterAndSortData() {
            if (!scanResults) return;
            
            const query = searchData.value.toLowerCase();
            const sortBy = sortOption.value;
            
            // 获取当前视图类型的数据
            let data = [];
            switch (currentViewType) {
                case 'fileTypes':
                    data = [...scanResults.fileTypes];
                    break;
                case 'folders':
                    data = [...scanResults.folders];
                    break;
                case 'applications':
                    data = [...scanResults.applications];
                    break;
            }
            
            // 应用过滤
            const filteredData = data.filter(item => 
                item.name.toLowerCase().includes(query)
            );
            
            // 应用排序
            let sortedData;
            switch (sortBy) {
                case 'size-desc':
                    sortedData = [...filteredData].sort((a, b) => b.size - a.size);
                    break;
                case 'size-asc':
                    sortedData = [...filteredData].sort((a, b) => a.size - b.size);
                    break;
                case 'name-asc':
                    sortedData = [...filteredData].sort((a, b) => a.name.localeCompare(b.name));
                    break;
                case 'name-desc':
                    sortedData = [...filteredData].sort((a, b) => b.name.localeCompare(a.name));
                    break;
                default:
                    sortedData = filteredData;
            }
            
            // 渲染表格
            renderDataTable(sortedData);
        }
        
        // 更新数据表格
        function updateDataTable() {
            currentPage = 1;
            filterAndSortData();
        }
        
        // 渲染数据表格
        function renderDataTable(data) {
            const total = data.length;
            const start = (currentPage - 1) * itemsPerPage;
            const end = Math.min(start + itemsPerPage, total);
            const paginatedData = data.slice(start, end);
            
            // 更新分页信息
            startItem.textContent = total > 0 ? start + 1 : 0;
            endItem.textContent = end;
            totalItems.textContent = total;
            
            // 更新分页按钮状态
            prevPageBtn.disabled = currentPage === 1;
            nextPageBtn.disabled = end >= total;
            
            // 清空表格
            dataTableBody.innerHTML = '';
            
            if (paginatedData.length === 0) {
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = `
                    <td colspan="4" class="px-6 py-10 text-center text-gray-500">
                        <i class="fa fa-search text-4xl mb-3 block opacity-30"></i>
                        <p>没有找到匹配的数据</p>
                    </td>
                `;
                dataTableBody.appendChild(emptyRow);
                return;
            }
            
            // 渲染数据行
            paginatedData.forEach(item => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 transition-colors';
                
                // 计算百分比
                const percentage = scanResults.totalSize > 0 ? 
                    Math.round((item.size / scanResults.totalSize) * 100) : 0;
                
                // 根据当前视图类型显示不同的列
                let fileCountHtml = '<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">-</td>';
                if (currentViewType === 'fileTypes' && item.count !== undefined) {
                    fileCountHtml = `<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${item.count.toLocaleString()}</td>`;
                }
                
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <i class="fa ${getIconForItem(item)} mr-3"></i>
                            <div class="text-sm font-medium text-gray-900 truncate max-w-xs" title="${item.name}">${item.name}</div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">${formatBytes(item.size)}</div>
                    </td>
                    <td class="px-6 py-4">
                        <div class="flex items-center">
                            <div class="w-full bg-gray-200 rounded-full h-2 mr-2">
                                <div class="bg-primary h-2 rounded-full" style="width: ${percentage}%"></div>
                            </div>
                            <span class="text-xs text-gray-500 whitespace-nowrap">${percentage}%</span>
                        </div>
                    </td>
                    ${fileCountHtml}
                `;
                
                dataTableBody.appendChild(row);
            });
        }
        
        // 获取项目对应的图标
        function getIconForItem(item) {
            switch (currentViewType) {
                case 'fileTypes':
                    if (item.extension) {
                        const ext = item.extension.toLowerCase();
                        if (['jpg', 'jpeg', 'png', 'gif', 'bmp'].includes(ext)) {
                            return 'fa-file-image-o text-primary';
                        } else if (['mp3', 'wav', 'flac'].includes(ext)) {
                            return 'fa-file-audio-o text-secondary';
                        } else if (['mp4', 'avi', 'mkv', 'mov'].includes(ext)) {
                            return 'fa-file-video-o text-accent';
                        } else if (['doc', 'docx'].includes(ext)) {
                            return 'fa-file-word-o text-blue-600';
                        } else if (['xls', 'xlsx'].includes(ext)) {
                            return 'fa-file-excel-o text-green-600';
                        } else if (['ppt', 'pptx'].includes(ext)) {
                            return 'fa-file-powerpoint-o text-red-600';
                        } else if (['pdf'].includes(ext)) {
                            return 'fa-file-pdf-o text-danger';
                        } else if (['zip', 'rar', '7z'].includes(ext)) {
                            return 'fa-file-archive-o text-yellow-600';
                        } else if (['exe'].includes(ext)) {
                            return 'fa-file-exe-o text-red-500';
                        } else if (['txt', 'md'].includes(ext)) {
                            return 'fa-file-text-o text-gray-500';
                        } else if (['js', 'css', 'html', 'php', 'py', 'java', 'c', 'cpp'].includes(ext)) {
                            return 'fa-file-code-o text-purple-600';
                        }
                    }
                    return 'fa-file-o text-gray-400';
                case 'folders':
                    return 'fa-folder text-yellow-500';
                case 'applications':
                    return 'fa-cube text-blue-500';
                default:
                    return 'fa-file-o text-gray-400';
            }
        }
        
        // 翻页功能
        function goToPrevPage() {
            if (currentPage > 1) {
                currentPage--;
                filterAndSortData();
            }
        }
        
        function goToNextPage() {
            const query = searchData.value.toLowerCase();
            let data = [];
            
            // 获取当前视图类型的数据
            switch (currentViewType) {
                case 'fileTypes':
                    data = scanResults.fileTypes;
                    break;
                case 'folders':
                    data = scanResults.folders;
                    break;
                case 'applications':
                    data = scanResults.applications;
                    break;
            }
            
            // 应用过滤
            const filteredData = data.filter(item => 
                item.name.toLowerCase().includes(query)
            );
            
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                filterAndSortData();
            }
        }
        
        // 格式化字节数
        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';
            
            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
            
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }
        
        // 切换主题
        function toggleTheme() {
            document.body.classList.toggle('dark-mode');
            const isDark = document.body.classList.contains('dark-mode');
            
            if (isDark) {
                themeToggle.innerHTML = '<i class="fa fa-sun-o text-yellow-400 text-xl transition-all duration-300 pulse-animation"></i>';
                document.body.classList.remove('bg-gradient-to-br', 'from-light', 'to-white');
                document.body.classList.add('dark-mode');
                
                // 更新导航栏样式
                document.querySelector('header').classList.add('nav-glass');
                
                // 更新图表卡片样式
                document.querySelectorAll('#apps-chart-card, #types-chart-card, #folders-chart-card, #code-lang-chart-card').forEach(el => {
                    el.classList.add('glass-card');
                });
                
                // 更新按钮样式
                document.querySelectorAll('#scan-button').forEach(el => {
                    el.classList.add('btn-primary');
                });
                document.querySelectorAll('#stop-button').forEach(el => {
                    el.classList.add('btn-danger');
                });
                
                // 更新进度条样式
                document.querySelector('#scan-progress-bar').classList.add('progress-glow');
                document.querySelector('#scan-percentage').classList.add('text-glow');
                
                // 保存主题偏好
                localStorage.setItem('theme', 'dark');
            } else {
                themeToggle.innerHTML = '<i class="fa fa-moon-o text-dark text-xl transition-all duration-300"></i>';
                document.body.classList.remove('dark-mode');
                document.body.classList.add('bg-gradient-to-br', 'from-light', 'to-white');
                
                // 恢复导航栏样式
                document.querySelector('header').classList.remove('nav-glass');
                
                // 恢复图表卡片样式
                document.querySelectorAll('#apps-chart-card, #types-chart-card, #folders-chart-card, #code-lang-chart-card').forEach(el => {
                    el.classList.remove('glass-card');
                });
                
                // 恢复按钮样式
                document.querySelectorAll('#scan-button').forEach(el => {
                    el.classList.remove('btn-primary');
                });
                document.querySelectorAll('#stop-button').forEach(el => {
                    el.classList.remove('btn-danger');
                });
                
                // 恢复进度条样式
                document.querySelector('#scan-progress-bar').classList.remove('progress-glow');
                document.querySelector('#scan-percentage').classList.remove('text-glow');
                
                // 保存主题偏好
                localStorage.setItem('theme', 'light');
            }
        }
        
        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>

